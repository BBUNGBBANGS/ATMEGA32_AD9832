
ATMEGA32_AD9832.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  000011dc  00001270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800096  00800096  000012a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001587  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007dd  00000000  00000000  0000298f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000850  00000000  00000000  0000316c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  000039bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000740  00000000  00000000  00003c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000efb  00000000  00000000  00004344  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000523f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1b 03 	call	0x636	; 0x636 <main>
      8a:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Port_Init>:
}

static void Port_Init(void)
{
    /* PORTA 출력 Default LOW 설정*/
    PORTA = 0x00; 
      92:	1b ba       	out	0x1b, r1	; 27
    /* PA4~7 핀 출력 설정*/
    DDRA = 0xF0;     
      94:	80 ef       	ldi	r24, 0xF0	; 240
      96:	8a bb       	out	0x1a, r24	; 26
    /* PORTC 출력 Default LOW 설정*/
    PORTC = 0x00;
      98:	15 ba       	out	0x15, r1	; 21
    /* PC1~3 핀 출력 설정, PC0 핀 입력 설정 */
    DDRA = 0xF0;     
      9a:	8a bb       	out	0x1a, r24	; 26
    DDRC = 0x0E;
      9c:	8e e0       	ldi	r24, 0x0E	; 14
      9e:	84 bb       	out	0x14, r24	; 20
      a0:	08 95       	ret

000000a2 <Uart_Init>:
    OUTPUT_ON(AD5204_PORT,AD5204_CS_PIN);
}

static void Uart_Init(void)
{
	UCSRB= (1<<RXEN) | (1<<TXEN);                  // Enable Receiver and Transmitter
      a2:	88 e1       	ldi	r24, 0x18	; 24
      a4:	8a b9       	out	0x0a, r24	; 10
	UCSRC= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);   // Asynchronous mode 8-bit data and 1-stop bit
      a6:	86 e8       	ldi	r24, 0x86	; 134
      a8:	80 bd       	out	0x20, r24	; 32
	UCSRA= 0x00;                                   // Clear the UASRT status register
      aa:	1b b8       	out	0x0b, r1	; 11
	UBRRL = 3; //115200bps 3(7.3728Mhz)
      ac:	83 e0       	ldi	r24, 0x03	; 3
      ae:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0; //115200bps 3(7.3728Mhz)
      b0:	10 bc       	out	0x20, r1	; 32
      b2:	08 95       	ret

000000b4 <Uart_Transmit>:
}

static void Uart_Transmit(char data)
{
    /* Wait for empty transmit buffer */
    while (!( UCSRA & (1<<UDRE)));
      b4:	5d 9b       	sbis	0x0b, 5	; 11
      b6:	fe cf       	rjmp	.-4      	; 0xb4 <Uart_Transmit>
    /* Put data into buffer, sends the data */
    UDR = data;
      b8:	8c b9       	out	0x0c, r24	; 12
      ba:	08 95       	ret

000000bc <Uart_Transmit_Array>:
	UBRRL = 3; //115200bps 3(7.3728Mhz)
	UBRRH = 0; //115200bps 3(7.3728Mhz)
}

static void Uart_Transmit_Array(char *data_ptr, unsigned char length)
{
      bc:	0f 93       	push	r16
      be:	1f 93       	push	r17
      c0:	cf 93       	push	r28
      c2:	df 93       	push	r29
      c4:	fc 01       	movw	r30, r24
      c6:	d6 2f       	mov	r29, r22
    unsigned char ch;
    for(ch=0;ch<length;ch++)
      c8:	c0 e0       	ldi	r28, 0x00	; 0
      ca:	08 c0       	rjmp	.+16     	; 0xdc <Uart_Transmit_Array+0x20>
    {
        Uart_Transmit(*data_ptr++);
      cc:	8f 01       	movw	r16, r30
      ce:	0f 5f       	subi	r16, 0xFF	; 255
      d0:	1f 4f       	sbci	r17, 0xFF	; 255
      d2:	80 81       	ld	r24, Z
      d4:	0e 94 5a 00 	call	0xb4	; 0xb4 <Uart_Transmit>
}

static void Uart_Transmit_Array(char *data_ptr, unsigned char length)
{
    unsigned char ch;
    for(ch=0;ch<length;ch++)
      d8:	cf 5f       	subi	r28, 0xFF	; 255
    {
        Uart_Transmit(*data_ptr++);
      da:	f8 01       	movw	r30, r16
}

static void Uart_Transmit_Array(char *data_ptr, unsigned char length)
{
    unsigned char ch;
    for(ch=0;ch<length;ch++)
      dc:	cd 17       	cp	r28, r29
      de:	b0 f3       	brcs	.-20     	; 0xcc <Uart_Transmit_Array+0x10>
    {
        Uart_Transmit(*data_ptr++);
    }
}
      e0:	df 91       	pop	r29
      e2:	cf 91       	pop	r28
      e4:	1f 91       	pop	r17
      e6:	0f 91       	pop	r16
      e8:	08 95       	ret

000000ea <Clear_Tx_Buffer>:
    /* Put data into buffer, sends the data */
    UDR = data;
}
static void Clear_Tx_Buffer(char *buf,unsigned int length)
{
    for(unsigned int i = 0; i < length; i++)
      ea:	20 e0       	ldi	r18, 0x00	; 0
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	06 c0       	rjmp	.+12     	; 0xfc <Clear_Tx_Buffer+0x12>
    {
        buf[i] = 0;
      f0:	fc 01       	movw	r30, r24
      f2:	e2 0f       	add	r30, r18
      f4:	f3 1f       	adc	r31, r19
      f6:	10 82       	st	Z, r1
    /* Put data into buffer, sends the data */
    UDR = data;
}
static void Clear_Tx_Buffer(char *buf,unsigned int length)
{
    for(unsigned int i = 0; i < length; i++)
      f8:	2f 5f       	subi	r18, 0xFF	; 255
      fa:	3f 4f       	sbci	r19, 0xFF	; 255
      fc:	26 17       	cp	r18, r22
      fe:	37 07       	cpc	r19, r23
     100:	b8 f3       	brcs	.-18     	; 0xf0 <Clear_Tx_Buffer+0x6>
    {
        buf[i] = 0;
    }
     102:	08 95       	ret

00000104 <AD7705_Read_Data>:

    return retval;
}

static uint32_t AD7705_Read_Data(uint8_t length)
{
     104:	cf 92       	push	r12
     106:	df 92       	push	r13
     108:	ef 92       	push	r14
     10a:	ff 92       	push	r15
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
    uint32_t retval = 0;
    /* CS Pin LOW 설정 */
    OUTPUT_OFF(AD7705_PORT,AD7705_CS_PIN);    
     110:	95 b3       	in	r25, 0x15	; 21
     112:	9d 7f       	andi	r25, 0xFD	; 253
     114:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     116:	91 e3       	ldi	r25, 0x31	; 49
     118:	9a 95       	dec	r25
     11a:	f1 f7       	brne	.-4      	; 0x118 <AD7705_Read_Data+0x14>
     11c:	00 00       	nop
    _delay_us(20);
    for(uint8_t i = 0; i < (8 * length); i++)
     11e:	40 e0       	ldi	r20, 0x00	; 0
    return retval;
}

static uint32_t AD7705_Read_Data(uint8_t length)
{
    uint32_t retval = 0;
     120:	c1 2c       	mov	r12, r1
     122:	d1 2c       	mov	r13, r1
     124:	76 01       	movw	r14, r12
    /* CS Pin LOW 설정 */
    OUTPUT_OFF(AD7705_PORT,AD7705_CS_PIN);    
    _delay_us(20);
    for(uint8_t i = 0; i < (8 * length); i++)
     126:	24 c0       	rjmp	.+72     	; 0x170 <AD7705_Read_Data+0x6c>
    {
        /* SCLK 핀 LOW 설정 */
        OUTPUT_OFF(AD7705_PORT,AD7705_CLK_PIN);    
     128:	95 b3       	in	r25, 0x15	; 21
     12a:	9b 7f       	andi	r25, 0xFB	; 251
     12c:	95 bb       	out	0x15, r25	; 21
     12e:	91 e3       	ldi	r25, 0x31	; 49
     130:	9a 95       	dec	r25
     132:	f1 f7       	brne	.-4      	; 0x130 <AD7705_Read_Data+0x2c>
     134:	00 00       	nop
        _delay_us(20);
        /* SCLK 핀 HIGH 설정 */
        OUTPUT_ON(AD7705_PORT,AD7705_CLK_PIN); 
     136:	95 b3       	in	r25, 0x15	; 21
     138:	94 60       	ori	r25, 0x04	; 4
     13a:	95 bb       	out	0x15, r25	; 21
        /* SCLK Rising Edge에서 Data Read */
        if(INPUT_READ(AD7705_PIN,AD7705_OUT_PIN) != 0)
     13c:	98 9b       	sbis	0x13, 0	; 19
     13e:	13 c0       	rjmp	.+38     	; 0x166 <AD7705_Read_Data+0x62>
        {
            retval |= 1 << ((8*length - 1) - i);
     140:	21 50       	subi	r18, 0x01	; 1
     142:	31 09       	sbc	r19, r1
     144:	26 1b       	sub	r18, r22
     146:	37 0b       	sbc	r19, r23
     148:	01 e0       	ldi	r16, 0x01	; 1
     14a:	10 e0       	ldi	r17, 0x00	; 0
     14c:	02 c0       	rjmp	.+4      	; 0x152 <AD7705_Read_Data+0x4e>
     14e:	00 0f       	add	r16, r16
     150:	11 1f       	adc	r17, r17
     152:	2a 95       	dec	r18
     154:	e2 f7       	brpl	.-8      	; 0x14e <AD7705_Read_Data+0x4a>
     156:	01 2e       	mov	r0, r17
     158:	00 0c       	add	r0, r0
     15a:	22 0b       	sbc	r18, r18
     15c:	33 0b       	sbc	r19, r19
     15e:	c0 2a       	or	r12, r16
     160:	d1 2a       	or	r13, r17
     162:	e2 2a       	or	r14, r18
     164:	f3 2a       	or	r15, r19
     166:	91 e3       	ldi	r25, 0x31	; 49
     168:	9a 95       	dec	r25
     16a:	f1 f7       	brne	.-4      	; 0x168 <AD7705_Read_Data+0x64>
     16c:	00 00       	nop
{
    uint32_t retval = 0;
    /* CS Pin LOW 설정 */
    OUTPUT_OFF(AD7705_PORT,AD7705_CS_PIN);    
    _delay_us(20);
    for(uint8_t i = 0; i < (8 * length); i++)
     16e:	4f 5f       	subi	r20, 0xFF	; 255
     170:	64 2f       	mov	r22, r20
     172:	70 e0       	ldi	r23, 0x00	; 0
     174:	28 2f       	mov	r18, r24
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	22 0f       	add	r18, r18
     17a:	33 1f       	adc	r19, r19
     17c:	22 0f       	add	r18, r18
     17e:	33 1f       	adc	r19, r19
     180:	22 0f       	add	r18, r18
     182:	33 1f       	adc	r19, r19
     184:	62 17       	cp	r22, r18
     186:	73 07       	cpc	r23, r19
     188:	7c f2       	brlt	.-98     	; 0x128 <AD7705_Read_Data+0x24>
            retval |= 1 << ((8*length - 1) - i);
        }
        _delay_us(20);
    }
    /* CS Pin HIGH 설정 */
    OUTPUT_ON(AD7705_PORT,AD7705_CS_PIN);    
     18a:	85 b3       	in	r24, 0x15	; 21
     18c:	82 60       	ori	r24, 0x02	; 2
     18e:	85 bb       	out	0x15, r24	; 21

    return retval;
}
     190:	c7 01       	movw	r24, r14
     192:	b6 01       	movw	r22, r12
     194:	1f 91       	pop	r17
     196:	0f 91       	pop	r16
     198:	ff 90       	pop	r15
     19a:	ef 90       	pop	r14
     19c:	df 90       	pop	r13
     19e:	cf 90       	pop	r12
     1a0:	08 95       	ret

000001a2 <AD7705_Write_Data>:

static void AD7705_Write_Data(uint8_t val,uint8_t length)
{
    /* CS Pin LOW 설정 */
    OUTPUT_OFF(AD7705_PORT,AD7705_CS_PIN);    
     1a2:	95 b3       	in	r25, 0x15	; 21
     1a4:	9d 7f       	andi	r25, 0xFD	; 253
     1a6:	95 bb       	out	0x15, r25	; 21
     1a8:	91 e3       	ldi	r25, 0x31	; 49
     1aa:	9a 95       	dec	r25
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <AD7705_Write_Data+0x8>
     1ae:	00 00       	nop
    _delay_us(20);
    for(uint8_t i = 0; i < (8 * length); i++)
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	28 c0       	rjmp	.+80     	; 0x204 <AD7705_Write_Data+0x62>
    {        
        /* SCLK 핀 LOW 설정 */
        OUTPUT_OFF(AD7705_PORT,AD7705_CLK_PIN);    
     1b4:	95 b3       	in	r25, 0x15	; 21
     1b6:	9b 7f       	andi	r25, 0xFB	; 251
     1b8:	95 bb       	out	0x15, r25	; 21
     1ba:	e8 e1       	ldi	r30, 0x18	; 24
     1bc:	ea 95       	dec	r30
     1be:	f1 f7       	brne	.-4      	; 0x1bc <AD7705_Write_Data+0x1a>
     1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <AD7705_Write_Data+0x20>
        _delay_us(10);
        /* MSB 출력 (최상위 bit가 먼저 출력 됨)*/
        if (((val >> ((8*length - 1) - i)) & 0x01) == 1)
     1c2:	21 50       	subi	r18, 0x01	; 1
     1c4:	31 09       	sbc	r19, r1
     1c6:	24 1b       	sub	r18, r20
     1c8:	35 0b       	sbc	r19, r21
     1ca:	48 2f       	mov	r20, r24
     1cc:	50 e0       	ldi	r21, 0x00	; 0
     1ce:	fa 01       	movw	r30, r20
     1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <AD7705_Write_Data+0x34>
     1d2:	f5 95       	asr	r31
     1d4:	e7 95       	ror	r30
     1d6:	2a 95       	dec	r18
     1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <AD7705_Write_Data+0x30>
     1da:	e0 ff       	sbrs	r30, 0
     1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <AD7705_Write_Data+0x44>
        {
            OUTPUT_ON(AD7705_PORT,AD7705_IN_PIN);            
     1de:	95 b3       	in	r25, 0x15	; 21
     1e0:	98 60       	ori	r25, 0x08	; 8
     1e2:	95 bb       	out	0x15, r25	; 21
     1e4:	03 c0       	rjmp	.+6      	; 0x1ec <AD7705_Write_Data+0x4a>
        }
        else
        {
            OUTPUT_OFF(AD7705_PORT,AD7705_IN_PIN);      
     1e6:	95 b3       	in	r25, 0x15	; 21
     1e8:	97 7f       	andi	r25, 0xF7	; 247
     1ea:	95 bb       	out	0x15, r25	; 21
     1ec:	f8 e1       	ldi	r31, 0x18	; 24
     1ee:	fa 95       	dec	r31
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <AD7705_Write_Data+0x4c>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <AD7705_Write_Data+0x52>
        }
        _delay_us(10);        
        /* SCLK 핀 HIGH 설정 */
        OUTPUT_ON(AD7705_PORT,AD7705_CLK_PIN); 
     1f4:	95 b3       	in	r25, 0x15	; 21
     1f6:	94 60       	ori	r25, 0x04	; 4
     1f8:	95 bb       	out	0x15, r25	; 21
     1fa:	91 e3       	ldi	r25, 0x31	; 49
     1fc:	9a 95       	dec	r25
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <AD7705_Write_Data+0x5a>
     200:	00 00       	nop
static void AD7705_Write_Data(uint8_t val,uint8_t length)
{
    /* CS Pin LOW 설정 */
    OUTPUT_OFF(AD7705_PORT,AD7705_CS_PIN);    
    _delay_us(20);
    for(uint8_t i = 0; i < (8 * length); i++)
     202:	7f 5f       	subi	r23, 0xFF	; 255
     204:	47 2f       	mov	r20, r23
     206:	50 e0       	ldi	r21, 0x00	; 0
     208:	26 2f       	mov	r18, r22
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	22 0f       	add	r18, r18
     20e:	33 1f       	adc	r19, r19
     210:	22 0f       	add	r18, r18
     212:	33 1f       	adc	r19, r19
     214:	22 0f       	add	r18, r18
     216:	33 1f       	adc	r19, r19
     218:	42 17       	cp	r20, r18
     21a:	53 07       	cpc	r21, r19
     21c:	5c f2       	brlt	.-106    	; 0x1b4 <AD7705_Write_Data+0x12>
        /* SCLK 핀 HIGH 설정 */
        OUTPUT_ON(AD7705_PORT,AD7705_CLK_PIN); 
        _delay_us(20);
    }
    /* CS Pin HIGH 설정 */
    OUTPUT_ON(AD7705_PORT,AD7705_CS_PIN);    
     21e:	85 b3       	in	r24, 0x15	; 21
     220:	82 60       	ori	r24, 0x02	; 2
     222:	85 bb       	out	0x15, r24	; 21
     224:	08 95       	ret

00000226 <AD7705_Reset>:
}

static void AD7705_Reset(void)
{
    /* 32bit High 전송할 경우 리셋 */
    AD7705_Write_Data(0xFF,4);    
     226:	64 e0       	ldi	r22, 0x04	; 4
     228:	8f ef       	ldi	r24, 0xFF	; 255
     22a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <AD7705_Write_Data>
    AD7705_Write_Data(0xFF,4);
     22e:	64 e0       	ldi	r22, 0x04	; 4
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <AD7705_Write_Data>
     236:	08 95       	ret

00000238 <AD7705_Write_Clock_Register>:
//CLKDIV: clock divider bit
static void AD7705_Write_Clock_Register(uint8_t CLKDIS, uint8_t CLKDIV, uint8_t UpdateRate)
{
    uint8_t val = 0;
    /* 레지스터 버퍼 설정 */
    val = (CLKDIS << 4) | (CLKDIV << 3) | UpdateRate;
     238:	20 e1       	ldi	r18, 0x10	; 16
     23a:	82 9f       	mul	r24, r18
     23c:	c0 01       	movw	r24, r0
     23e:	11 24       	eor	r1, r1
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	66 0f       	add	r22, r22
     244:	77 1f       	adc	r23, r23
     246:	66 0f       	add	r22, r22
     248:	77 1f       	adc	r23, r23
     24a:	66 0f       	add	r22, r22
     24c:	77 1f       	adc	r23, r23
     24e:	68 2b       	or	r22, r24
     250:	86 2f       	mov	r24, r22
     252:	84 2b       	or	r24, r20
    /* Clock 값 있을 경우 초기화(설정 금지) */
    val &= ~(1 << 2); 
    /* 8-bit 레지스터 Write */
    AD7705_Write_Data(val,1);
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	8b 7f       	andi	r24, 0xFB	; 251
     258:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <AD7705_Write_Data>
     25c:	08 95       	ret

0000025e <AD7705_Write_Communication_Register>:

//write communication register
//   7        6      5      4      3      2      1      0
//0/DRDY(0) RS2(0) RS1(0) RS0(0) R/W(0) STBY(0) CH1(0) CH0(0)
static void AD7705_Write_Communication_Register(uint8_t reg, uint8_t channel, uint8_t readWrite)
{
     25e:	96 2f       	mov	r25, r22
    uint8_t val = 0;
    /* 레지스터 버퍼 설정 */
    val = (reg << 4) | (readWrite << 3) | channel;
     260:	50 e1       	ldi	r21, 0x10	; 16
     262:	85 9f       	mul	r24, r21
     264:	90 01       	movw	r18, r0
     266:	11 24       	eor	r1, r1
     268:	50 e0       	ldi	r21, 0x00	; 0
     26a:	44 0f       	add	r20, r20
     26c:	55 1f       	adc	r21, r21
     26e:	44 0f       	add	r20, r20
     270:	55 1f       	adc	r21, r21
     272:	44 0f       	add	r20, r20
     274:	55 1f       	adc	r21, r21
     276:	82 2f       	mov	r24, r18
     278:	84 2b       	or	r24, r20
    /* 8-bit 레지스터 Write */
    AD7705_Write_Data(val,1);
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	89 2b       	or	r24, r25
     27e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <AD7705_Write_Data>
     282:	08 95       	ret

00000284 <AD7705_Data_Ready>:

static uint8_t AD7705_Data_Ready(uint8_t channel) 
{
    uint8_t val = 0;
    /* Command 레지스터 출력 설정 */
    AD7705_Write_Communication_Register(REG_CMM, channel, 1);
     284:	41 e0       	ldi	r20, 0x01	; 1
     286:	68 2f       	mov	r22, r24
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	0e 94 2f 01 	call	0x25e	; 0x25e <AD7705_Write_Communication_Register>
    /* 8bit LOW 출력 및 Read */
    val = (uint8_t)AD7705_Read_Data(1);
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0e 94 82 00 	call	0x104	; 0x104 <AD7705_Read_Data>
    /* DRDY 핀 Status 리턴 */
    return ((val & 0x80) == 0x0);
     294:	86 2f       	mov	r24, r22
     296:	80 95       	com	r24
}
     298:	88 1f       	adc	r24, r24
     29a:	88 27       	eor	r24, r24
     29c:	88 1f       	adc	r24, r24
     29e:	08 95       	ret

000002a0 <AD7705_ADC_Result>:

static uint16_t AD7705_ADC_Result(uint8_t channel, uint16_t offset)
{
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	c8 2f       	mov	r28, r24
     2b0:	8b 01       	movw	r16, r22
    uint16_t retval = 0;
    /* 전송 가능할 때 까지 대기 */
    while (!AD7705_Data_Ready(channel));
     2b2:	8c 2f       	mov	r24, r28
     2b4:	0e 94 42 01 	call	0x284	; 0x284 <AD7705_Data_Ready>
     2b8:	88 23       	and	r24, r24
     2ba:	d9 f3       	breq	.-10     	; 0x2b2 <AD7705_ADC_Result+0x12>
    /* Data 레지스터 read 설정 */
    AD7705_Write_Communication_Register(REG_DATA, channel, 1);
     2bc:	41 e0       	ldi	r20, 0x01	; 1
     2be:	6c 2f       	mov	r22, r28
     2c0:	83 e0       	ldi	r24, 0x03	; 3
     2c2:	0e 94 2f 01 	call	0x25e	; 0x25e <AD7705_Write_Communication_Register>
    /* 16bit Data Read */
    retval = AD7705_Read_Data(2);
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	0e 94 82 00 	call	0x104	; 0x104 <AD7705_Read_Data>
    /* ADC 전압 계산 Resolution 1[mV] */
    retval = (uint16_t)((float)retval * (float)Reference_Voltage / 65536.0f - offset);
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 80 04 	call	0x900	; 0x900 <__floatunsisf>
     2d4:	6b 01       	movw	r12, r22
     2d6:	7c 01       	movw	r14, r24
     2d8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2dc:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 80 04 	call	0x900	; 0x900 <__floatunsisf>
     2e8:	9b 01       	movw	r18, r22
     2ea:	ac 01       	movw	r20, r24
     2ec:	c7 01       	movw	r24, r14
     2ee:	b6 01       	movw	r22, r12
     2f0:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__mulsf3>
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e8       	ldi	r20, 0x80	; 128
     2fa:	57 e3       	ldi	r21, 0x37	; 55
     2fc:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__mulsf3>
     300:	6b 01       	movw	r12, r22
     302:	7c 01       	movw	r14, r24
     304:	b8 01       	movw	r22, r16
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 80 04 	call	0x900	; 0x900 <__floatunsisf>
     30e:	9b 01       	movw	r18, r22
     310:	ac 01       	movw	r20, r24
     312:	c7 01       	movw	r24, r14
     314:	b6 01       	movw	r22, r12
     316:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__subsf3>
     31a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fixunssfsi>

    return retval;
}
     31e:	cb 01       	movw	r24, r22
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	df 90       	pop	r13
     32c:	cf 90       	pop	r12
     32e:	08 95       	ret

00000330 <AD7705_Write_Setup_Register>:

//Setup Register
//  7     6     5     4     3      2      1      0
//MD10) MD0(0) G2(0) G1(0) G0(0) B/U(0) BUF(0) FSYNC(1)
static void AD7705_Write_Setup_Register(uint8_t operationMode, uint8_t gain, uint8_t unipolar, uint8_t buffered, uint8_t fsync) 
{
     330:	0f 93       	push	r16
    uint8_t val = 0;
    /* 레지스터 버퍼 설정 */
    val = (operationMode << 6) | (gain << 3) | (unipolar << 2) | (buffered << 1) | fsync;
     332:	30 e4       	ldi	r19, 0x40	; 64
     334:	83 9f       	mul	r24, r19
     336:	c0 01       	movw	r24, r0
     338:	11 24       	eor	r1, r1
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	66 0f       	add	r22, r22
     33e:	77 1f       	adc	r23, r23
     340:	66 0f       	add	r22, r22
     342:	77 1f       	adc	r23, r23
     344:	66 0f       	add	r22, r22
     346:	77 1f       	adc	r23, r23
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	44 0f       	add	r20, r20
     34c:	55 1f       	adc	r21, r21
     34e:	44 0f       	add	r20, r20
     350:	55 1f       	adc	r21, r21
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	86 2b       	or	r24, r22
     35a:	84 2b       	or	r24, r20
     35c:	82 2b       	or	r24, r18
    /* 8-bit 레지스터 Write */
    AD7705_Write_Data(val,1);
     35e:	61 e0       	ldi	r22, 0x01	; 1
     360:	80 2b       	or	r24, r16
     362:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <AD7705_Write_Data>
}
     366:	0f 91       	pop	r16
     368:	08 95       	ret

0000036a <AD7705_Channel_Setting>:
    AD7705_Write_Data(0xFF,4);    
    AD7705_Write_Data(0xFF,4);
}

static void AD7705_Channel_Setting(uint8_t channel, uint8_t clkDivider, uint8_t polarity, uint8_t gain, uint8_t updRate)
{
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	c8 2f       	mov	r28, r24
     376:	f6 2e       	mov	r15, r22
     378:	14 2f       	mov	r17, r20
     37a:	d2 2f       	mov	r29, r18
    /* 채널 별 Clock 레지스터 설정 */
    AD7705_Write_Communication_Register(REG_CLOCK, channel, 0);
     37c:	40 e0       	ldi	r20, 0x00	; 0
     37e:	68 2f       	mov	r22, r24
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	0e 94 2f 01 	call	0x25e	; 0x25e <AD7705_Write_Communication_Register>
    /* 채널 별 Clock divider 및 Update Rate 설정 */
    AD7705_Write_Clock_Register(0, clkDivider, updRate);
     386:	40 2f       	mov	r20, r16
     388:	6f 2d       	mov	r22, r15
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	0e 94 1c 01 	call	0x238	; 0x238 <AD7705_Write_Clock_Register>

    /* 채널 별 Setup 레지스터 설정 */
    AD7705_Write_Communication_Register(REG_SETUP, channel, 0);
     390:	40 e0       	ldi	r20, 0x00	; 0
     392:	6c 2f       	mov	r22, r28
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	0e 94 2f 01 	call	0x25e	; 0x25e <AD7705_Write_Communication_Register>
    /* 채널 별 Calibration 설정 및 Gain , Polarity 설정 */
    AD7705_Write_Setup_Register(MODE_SELF_CAL, gain, polarity, 0, 0);
     39a:	00 e0       	ldi	r16, 0x00	; 0
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	41 2f       	mov	r20, r17
     3a0:	6d 2f       	mov	r22, r29
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	0e 94 98 01 	call	0x330	; 0x330 <AD7705_Write_Setup_Register>
    
    /* 설정 완료까지 대기 */
    while (!AD7705_Data_Ready(channel));
     3a8:	8c 2f       	mov	r24, r28
     3aa:	0e 94 42 01 	call	0x284	; 0x284 <AD7705_Data_Ready>
     3ae:	88 23       	and	r24, r24
     3b0:	d9 f3       	breq	.-10     	; 0x3a8 <AD7705_Channel_Setting+0x3e>
}
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	ff 90       	pop	r15
     3bc:	08 95       	ret

000003be <AD7705_Init>:
    DDRA = 0xF0;     
    DDRC = 0x0E;
}

static void AD7705_Init(void)
{
     3be:	0f 93       	push	r16
    /* CS 핀 / SCLK 핀 Default HIGH 설정 */
    OUTPUT_ON(AD7705_PORT,AD7705_CS_PIN);        
     3c0:	85 b3       	in	r24, 0x15	; 21
     3c2:	82 60       	ori	r24, 0x02	; 2
     3c4:	85 bb       	out	0x15, r24	; 21
    OUTPUT_ON(AD7705_PORT,AD7705_CLK_PIN);    
     3c6:	85 b3       	in	r24, 0x15	; 21
     3c8:	84 60       	ori	r24, 0x04	; 4
     3ca:	85 bb       	out	0x15, r24	; 21
    AD7705_Reset();
     3cc:	0e 94 13 01 	call	0x226	; 0x226 <AD7705_Reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d0:	2f ef       	ldi	r18, 0xFF	; 255
     3d2:	8f e1       	ldi	r24, 0x1F	; 31
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	21 50       	subi	r18, 0x01	; 1
     3d8:	80 40       	sbci	r24, 0x00	; 0
     3da:	90 40       	sbci	r25, 0x00	; 0
     3dc:	e1 f7       	brne	.-8      	; 0x3d6 <AD7705_Init+0x18>
     3de:	00 c0       	rjmp	.+0      	; 0x3e0 <AD7705_Init+0x22>
     3e0:	00 00       	nop
    _delay_ms(50);
    /* AIN1 채널 ADC 셋팅*/
    AD7705_Channel_Setting(CHN_AIN1,CLK_DIV_1, BIPOLAR, GAIN_1, UPDATE_RATE_200);
     3e2:	03 e0       	ldi	r16, 0x03	; 3
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	41 e0       	ldi	r20, 0x01	; 1
     3e8:	61 e0       	ldi	r22, 0x01	; 1
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	0e 94 b5 01 	call	0x36a	; 0x36a <AD7705_Channel_Setting>
     3f0:	2f ef       	ldi	r18, 0xFF	; 255
     3f2:	8f e1       	ldi	r24, 0x1F	; 31
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	21 50       	subi	r18, 0x01	; 1
     3f8:	80 40       	sbci	r24, 0x00	; 0
     3fa:	90 40       	sbci	r25, 0x00	; 0
     3fc:	e1 f7       	brne	.-8      	; 0x3f6 <AD7705_Init+0x38>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
     400:	00 00       	nop
    _delay_ms(50);
    /* AIN2 채널 ADC 셋팅*/
    AD7705_Channel_Setting(CHN_AIN2,CLK_DIV_1, BIPOLAR, GAIN_1, UPDATE_RATE_200);
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	41 e0       	ldi	r20, 0x01	; 1
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	0e 94 b5 01 	call	0x36a	; 0x36a <AD7705_Channel_Setting>
}
     40e:	0f 91       	pop	r16
     410:	08 95       	ret

00000412 <AD9832_Write_Register>:
        AD9832_Write_Register(0xC000);        
    }
}

static void AD9832_Write_Register(uint16_t reg)
{
     412:	ac 01       	movw	r20, r24
    /* SCLK Pin HIGH 설정 */
    OUTPUT_ON(AD9832_PORT,AD9832_CLK);
     414:	8b b3       	in	r24, 0x1b	; 27
     416:	80 68       	ori	r24, 0x80	; 128
     418:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     41a:	61 e3       	ldi	r22, 0x31	; 49
     41c:	6a 95       	dec	r22
     41e:	f1 f7       	brne	.-4      	; 0x41c <AD9832_Write_Register+0xa>
     420:	00 00       	nop
    _delay_us(20);    
    /* FSYNC Pin LOW 설정 */
    OUTPUT_OFF(AD9832_PORT,AD9832_FSYNC_PIN);
     422:	8b b3       	in	r24, 0x1b	; 27
     424:	8f 7d       	andi	r24, 0xDF	; 223
     426:	8b bb       	out	0x1b, r24	; 27

    for (uint8_t i = 0; i < 16; i++)
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	20 c0       	rjmp	.+64     	; 0x46c <AD9832_Write_Register+0x5a>
    {
        /* MSB 출력 (최상위 bit가 먼저 출력 됨)*/
        /* SCLK Rising Edge에서 출력값 변경 */
        if (((reg >> (15-i)) & 0x01) == 1)
     42c:	2f e0       	ldi	r18, 0x0F	; 15
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	29 1b       	sub	r18, r25
     432:	31 09       	sbc	r19, r1
     434:	ba 01       	movw	r22, r20
     436:	02 c0       	rjmp	.+4      	; 0x43c <AD9832_Write_Register+0x2a>
     438:	76 95       	lsr	r23
     43a:	67 95       	ror	r22
     43c:	2a 95       	dec	r18
     43e:	e2 f7       	brpl	.-8      	; 0x438 <AD9832_Write_Register+0x26>
     440:	60 ff       	sbrs	r22, 0
     442:	04 c0       	rjmp	.+8      	; 0x44c <AD9832_Write_Register+0x3a>
        {
            OUTPUT_ON(AD9832_PORT,AD9832_SDI_PIN);
     444:	2b b3       	in	r18, 0x1b	; 27
     446:	20 64       	ori	r18, 0x40	; 64
     448:	2b bb       	out	0x1b, r18	; 27
     44a:	03 c0       	rjmp	.+6      	; 0x452 <AD9832_Write_Register+0x40>
        }
        else
        {
            OUTPUT_OFF(AD9832_PORT,AD9832_SDI_PIN);
     44c:	2b b3       	in	r18, 0x1b	; 27
     44e:	2f 7b       	andi	r18, 0xBF	; 191
     450:	2b bb       	out	0x1b, r18	; 27
     452:	7b e7       	ldi	r23, 0x7B	; 123
     454:	7a 95       	dec	r23
     456:	f1 f7       	brne	.-4      	; 0x454 <AD9832_Write_Register+0x42>
        }
        _delay_us(50);    
        /* SCLK Pin LOW 설정 */
        OUTPUT_OFF(AD9832_PORT,AD9832_CLK);
     458:	2b b3       	in	r18, 0x1b	; 27
     45a:	2f 77       	andi	r18, 0x7F	; 127
     45c:	2b bb       	out	0x1b, r18	; 27
     45e:	8b e7       	ldi	r24, 0x7B	; 123
     460:	8a 95       	dec	r24
     462:	f1 f7       	brne	.-4      	; 0x460 <AD9832_Write_Register+0x4e>
        _delay_us(50);
        /* SCLK Pin HIGH 설정 */
        OUTPUT_ON(AD9832_PORT,AD9832_CLK);
     464:	2b b3       	in	r18, 0x1b	; 27
     466:	20 68       	ori	r18, 0x80	; 128
     468:	2b bb       	out	0x1b, r18	; 27
    OUTPUT_ON(AD9832_PORT,AD9832_CLK);
    _delay_us(20);    
    /* FSYNC Pin LOW 설정 */
    OUTPUT_OFF(AD9832_PORT,AD9832_FSYNC_PIN);

    for (uint8_t i = 0; i < 16; i++)
     46a:	9f 5f       	subi	r25, 0xFF	; 255
     46c:	90 31       	cpi	r25, 0x10	; 16
     46e:	f0 f2       	brcs	.-68     	; 0x42c <AD9832_Write_Register+0x1a>
        _delay_us(50);
        /* SCLK Pin HIGH 설정 */
        OUTPUT_ON(AD9832_PORT,AD9832_CLK);
    }
    /* FSYNC Pin HIGH 설정 */
    OUTPUT_ON(AD9832_PORT,AD9832_FSYNC_PIN);
     470:	8b b3       	in	r24, 0x1b	; 27
     472:	80 62       	ori	r24, 0x20	; 32
     474:	8b bb       	out	0x1b, r24	; 27
     476:	08 95       	ret

00000478 <AD9832_Set_Frequency>:
    AD9832_Write_Register(0xB000);
    AD9832_Write_Register(0xC000);
}

static void AD9832_Set_Frequency(uint32_t freq)
{
     478:	af 92       	push	r10
     47a:	bf 92       	push	r11
     47c:	cf 92       	push	r12
     47e:	df 92       	push	r13
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
    /* Master Clock 증폭 값 계산 */
    uint32_t multiplier = (uint32_t)(((uint64_t)freq << 32) / AD9832_MASTER_CLOCK);
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	28 2f       	mov	r18, r24
     492:	39 2f       	mov	r19, r25
     494:	4a 2f       	mov	r20, r26
     496:	5b 2f       	mov	r21, r27
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	00 e2       	ldi	r16, 0x20	; 32
     4a2:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__ashldi3>
     4a6:	68 94       	set
     4a8:	aa 24       	eor	r10, r10
     4aa:	a7 f8       	bld	r10, 7
     4ac:	0f 2e       	mov	r0, r31
     4ae:	f6 e9       	ldi	r31, 0x96	; 150
     4b0:	bf 2e       	mov	r11, r31
     4b2:	f0 2d       	mov	r31, r0
     4b4:	0f 2e       	mov	r0, r31
     4b6:	f8 e9       	ldi	r31, 0x98	; 152
     4b8:	cf 2e       	mov	r12, r31
     4ba:	f0 2d       	mov	r31, r0
     4bc:	d1 2c       	mov	r13, r1
     4be:	e1 2c       	mov	r14, r1
     4c0:	f1 2c       	mov	r15, r1
     4c2:	00 e0       	ldi	r16, 0x00	; 0
     4c4:	10 e0       	ldi	r17, 0x00	; 0
     4c6:	0e 94 8c 05 	call	0xb18	; 0xb18 <__udivdi3>
     4ca:	72 2f       	mov	r23, r18
     4cc:	63 2f       	mov	r22, r19
     4ce:	02 2f       	mov	r16, r18
     4d0:	13 2f       	mov	r17, r19
     4d2:	24 2f       	mov	r18, r20
     4d4:	35 2f       	mov	r19, r21

    /* Master Clock 증폭 값 4-Byte로 분할 */
    uint16_t data_0,data_1,data_2,data_3;
    data_3 = 0x3300 | (0x00FF & (uint16_t)(multiplier >> 24));  // FREQ0 H-MSBs
     4d6:	83 2f       	mov	r24, r19
     4d8:	99 27       	eor	r25, r25
     4da:	aa 27       	eor	r26, r26
     4dc:	bb 27       	eor	r27, r27
     4de:	99 27       	eor	r25, r25
    data_2 = 0x2200 | (0x00FF & (uint16_t)(multiplier >> 16));  // FREQ0 L-MSBs
     4e0:	c4 2f       	mov	r28, r20
     4e2:	d0 e0       	ldi	r29, 0x00	; 0
     4e4:	d2 62       	ori	r29, 0x22	; 34
    data_1 = 0x3100 | (0x00FF & (uint16_t)(multiplier >> 8));   // FREQ0 H-LSBs
     4e6:	01 2f       	mov	r16, r17
     4e8:	12 2f       	mov	r17, r18
     4ea:	23 2f       	mov	r18, r19
     4ec:	33 27       	eor	r19, r19
     4ee:	11 27       	eor	r17, r17
     4f0:	11 63       	ori	r17, 0x31	; 49
    data_0 = 0x2000 | (0x00FF & (uint16_t)(multiplier));        // FREQ0 L-LSBs    
     4f2:	47 2f       	mov	r20, r23
     4f4:	56 2f       	mov	r21, r22
     4f6:	55 27       	eor	r21, r21
     4f8:	7a 01       	movw	r14, r20
     4fa:	68 94       	set
     4fc:	f5 f8       	bld	r15, 5

    /* MSB 4-Byte 전송 */
    AD9832_Write_Register(data_3);
     4fe:	93 63       	ori	r25, 0x33	; 51
     500:	0e 94 09 02 	call	0x412	; 0x412 <AD9832_Write_Register>
    AD9832_Write_Register(data_2);
     504:	ce 01       	movw	r24, r28
     506:	0e 94 09 02 	call	0x412	; 0x412 <AD9832_Write_Register>
    AD9832_Write_Register(data_1);
     50a:	c8 01       	movw	r24, r16
     50c:	0e 94 09 02 	call	0x412	; 0x412 <AD9832_Write_Register>
    AD9832_Write_Register(data_0);
     510:	c7 01       	movw	r24, r14
     512:	0e 94 09 02 	call	0x412	; 0x412 <AD9832_Write_Register>

    /* Phase 0 값 전송 */
    AD9832_Write_Register(0x1900);  // PHASE0 MSBs
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	99 e1       	ldi	r25, 0x19	; 25
     51a:	0e 94 09 02 	call	0x412	; 0x412 <AD9832_Write_Register>
    AD9832_Write_Register(0x0800);  // PHASE0 LSBs    
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	98 e0       	ldi	r25, 0x08	; 8
     522:	0e 94 09 02 	call	0x412	; 0x412 <AD9832_Write_Register>
}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	ff 90       	pop	r15
     530:	ef 90       	pop	r14
     532:	df 90       	pop	r13
     534:	cf 90       	pop	r12
     536:	bf 90       	pop	r11
     538:	af 90       	pop	r10
     53a:	08 95       	ret

0000053c <AD9832_Init>:
}

static void AD9832_Init(void)
{
    /* FSYNC 및 SCLK 핀 HIGH 설정 */
    OUTPUT_ON(AD9832_PORT,AD9832_FSYNC_PIN);    
     53c:	8b b3       	in	r24, 0x1b	; 27
     53e:	80 62       	ori	r24, 0x20	; 32
     540:	8b bb       	out	0x1b, r24	; 27
    OUTPUT_ON(AD9832_PORT,AD9832_CLK);
     542:	8b b3       	in	r24, 0x1b	; 27
     544:	80 68       	ori	r24, 0x80	; 128
     546:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	97 e4       	ldi	r25, 0x47	; 71
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	f1 f7       	brne	.-4      	; 0x54c <AD9832_Init+0x10>
     550:	00 c0       	rjmp	.+0      	; 0x552 <AD9832_Init+0x16>
     552:	00 00       	nop
    _delay_ms(10);
    /* 초기 레지스터값 Write */
    AD9832_Write_Register(0xF800);
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	98 ef       	ldi	r25, 0xF8	; 248
     558:	0e 94 09 02 	call	0x412	; 0x412 <AD9832_Write_Register>
    AD9832_Write_Register(0xB000);
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 eb       	ldi	r25, 0xB0	; 176
     560:	0e 94 09 02 	call	0x412	; 0x412 <AD9832_Write_Register>
    AD9832_Write_Register(0xC000);
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	90 ec       	ldi	r25, 0xC0	; 192
     568:	0e 94 09 02 	call	0x412	; 0x412 <AD9832_Write_Register>
     56c:	08 95       	ret

0000056e <AD5204_Write_Register>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56e:	21 e3       	ldi	r18, 0x31	; 49
     570:	2a 95       	dec	r18
     572:	f1 f7       	brne	.-4      	; 0x570 <AD5204_Write_Register+0x2>
     574:	00 00       	nop

static void AD5204_Write_Register(uint8_t channel, uint8_t val)
{
    _delay_us(20);    
    /* SCLK Pin LOW 설정 */
    OUTPUT_OFF(AD5204_PORT,AD5204_CLK);
     576:	9b b3       	in	r25, 0x1b	; 27
     578:	9f 77       	andi	r25, 0x7F	; 127
     57a:	9b bb       	out	0x1b, r25	; 27
     57c:	91 e3       	ldi	r25, 0x31	; 49
     57e:	9a 95       	dec	r25
     580:	f1 f7       	brne	.-4      	; 0x57e <AD5204_Write_Register+0x10>
     582:	00 00       	nop
    _delay_us(20);
    /* CS Pin LOW 설정 */
    OUTPUT_OFF(AD5204_PORT,AD5204_CS_PIN);
     584:	9b b3       	in	r25, 0x1b	; 27
     586:	9f 7e       	andi	r25, 0xEF	; 239
     588:	9b bb       	out	0x1b, r25	; 27

    for (uint8_t i = 0; i < 11; i++)
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	38 c0       	rjmp	.+112    	; 0x5fe <AD5204_Write_Register+0x90>
    {
        /* SCLK Pin LOW 설정 */
        OUTPUT_ON(AD5204_PORT,AD5204_CLK);
     58e:	2b b3       	in	r18, 0x1b	; 27
     590:	20 68       	ori	r18, 0x80	; 128
     592:	2b bb       	out	0x1b, r18	; 27
        /* 8~11 bit 채널 설정값 출력 */
        if(i<3)
     594:	93 30       	cpi	r25, 0x03	; 3
     596:	a8 f4       	brcc	.+42     	; 0x5c2 <AD5204_Write_Register+0x54>
        {
            if (((channel >> (2-i)) & 0x01) == 1)
     598:	42 e0       	ldi	r20, 0x02	; 2
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	49 1b       	sub	r20, r25
     59e:	51 09       	sbc	r21, r1
     5a0:	28 2f       	mov	r18, r24
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <AD5204_Write_Register+0x3c>
     5a6:	35 95       	asr	r19
     5a8:	27 95       	ror	r18
     5aa:	4a 95       	dec	r20
     5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <AD5204_Write_Register+0x38>
     5ae:	20 ff       	sbrs	r18, 0
     5b0:	04 c0       	rjmp	.+8      	; 0x5ba <AD5204_Write_Register+0x4c>
            {
                OUTPUT_ON(AD5204_PORT,AD5204_SDI_PIN);
     5b2:	2b b3       	in	r18, 0x1b	; 27
     5b4:	20 64       	ori	r18, 0x40	; 64
     5b6:	2b bb       	out	0x1b, r18	; 27
     5b8:	18 c0       	rjmp	.+48     	; 0x5ea <AD5204_Write_Register+0x7c>
            }
            else
            {
                OUTPUT_OFF(AD5204_PORT,AD5204_SDI_PIN);
     5ba:	2b b3       	in	r18, 0x1b	; 27
     5bc:	2f 7b       	andi	r18, 0xBF	; 191
     5be:	2b bb       	out	0x1b, r18	; 27
     5c0:	14 c0       	rjmp	.+40     	; 0x5ea <AD5204_Write_Register+0x7c>
            }
        }
        /* 0~7 bit data값 출력 */
        else
        {
            if (((val >> (10-i)) & 0x01) == 1)
     5c2:	4a e0       	ldi	r20, 0x0A	; 10
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	49 1b       	sub	r20, r25
     5c8:	51 09       	sbc	r21, r1
     5ca:	26 2f       	mov	r18, r22
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <AD5204_Write_Register+0x66>
     5d0:	35 95       	asr	r19
     5d2:	27 95       	ror	r18
     5d4:	4a 95       	dec	r20
     5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <AD5204_Write_Register+0x62>
     5d8:	20 ff       	sbrs	r18, 0
     5da:	04 c0       	rjmp	.+8      	; 0x5e4 <AD5204_Write_Register+0x76>
            {
                OUTPUT_ON(AD5204_PORT,AD5204_SDI_PIN);
     5dc:	2b b3       	in	r18, 0x1b	; 27
     5de:	20 64       	ori	r18, 0x40	; 64
     5e0:	2b bb       	out	0x1b, r18	; 27
     5e2:	03 c0       	rjmp	.+6      	; 0x5ea <AD5204_Write_Register+0x7c>
            }
            else
            {
                OUTPUT_OFF(AD5204_PORT,AD5204_SDI_PIN);
     5e4:	2b b3       	in	r18, 0x1b	; 27
     5e6:	2f 7b       	andi	r18, 0xBF	; 191
     5e8:	2b bb       	out	0x1b, r18	; 27
     5ea:	2b e7       	ldi	r18, 0x7B	; 123
     5ec:	2a 95       	dec	r18
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <AD5204_Write_Register+0x7e>
            }
        }

        _delay_us(50);        
        /* SCLK Pin LOW 설정 */
        OUTPUT_OFF(AD9832_PORT,AD5204_CLK);
     5f0:	2b b3       	in	r18, 0x1b	; 27
     5f2:	2f 77       	andi	r18, 0x7F	; 127
     5f4:	2b bb       	out	0x1b, r18	; 27
     5f6:	2b e7       	ldi	r18, 0x7B	; 123
     5f8:	2a 95       	dec	r18
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <AD5204_Write_Register+0x8a>
    OUTPUT_OFF(AD5204_PORT,AD5204_CLK);
    _delay_us(20);
    /* CS Pin LOW 설정 */
    OUTPUT_OFF(AD5204_PORT,AD5204_CS_PIN);

    for (uint8_t i = 0; i < 11; i++)
     5fc:	9f 5f       	subi	r25, 0xFF	; 255
     5fe:	9b 30       	cpi	r25, 0x0B	; 11
     600:	30 f2       	brcs	.-116    	; 0x58e <AD5204_Write_Register+0x20>
        /* SCLK Pin LOW 설정 */
        OUTPUT_OFF(AD9832_PORT,AD5204_CLK);
        _delay_us(50);
    }
    /* CS Pin LOW 설정 */
    OUTPUT_ON(AD5204_PORT,AD5204_CS_PIN);
     602:	8b b3       	in	r24, 0x1b	; 27
     604:	80 61       	ori	r24, 0x10	; 16
     606:	8b bb       	out	0x1b, r24	; 27
     608:	08 95       	ret

0000060a <AD5204_Set_Scale>:
    /* default scale 설정 */
    AD5204_Set_Scale(4);
}

static void AD5204_Set_Scale(uint8_t level)
{
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	d8 2f       	mov	r29, r24
    for(uint8_t channel = 0; channel < 4; channel++)
     610:	c0 e0       	ldi	r28, 0x00	; 0
     612:	05 c0       	rjmp	.+10     	; 0x61e <AD5204_Set_Scale+0x14>
    {
        AD5204_Write_Register(channel,level);
     614:	6d 2f       	mov	r22, r29
     616:	8c 2f       	mov	r24, r28
     618:	0e 94 b7 02 	call	0x56e	; 0x56e <AD5204_Write_Register>
    AD5204_Set_Scale(4);
}

static void AD5204_Set_Scale(uint8_t level)
{
    for(uint8_t channel = 0; channel < 4; channel++)
     61c:	cf 5f       	subi	r28, 0xFF	; 255
     61e:	c4 30       	cpi	r28, 0x04	; 4
     620:	c8 f3       	brcs	.-14     	; 0x614 <AD5204_Set_Scale+0xa>
    {
        AD5204_Write_Register(channel,level);
    }    
}
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	08 95       	ret

00000628 <AD5204_Init>:
}

static void AD5204_Init(void)
{
    /* CS Pin HIGH 설정 */
    OUTPUT_ON(AD5204_PORT,AD5204_CS_PIN);
     628:	8b b3       	in	r24, 0x1b	; 27
     62a:	80 61       	ori	r24, 0x10	; 16
     62c:	8b bb       	out	0x1b, r24	; 27
    /* default scale 설정 */
    AD5204_Set_Scale(4);
     62e:	84 e0       	ldi	r24, 0x04	; 4
     630:	0e 94 05 03 	call	0x60a	; 0x60a <AD5204_Set_Scale>
     634:	08 95       	ret

00000636 <main>:
static void AD7705_Write_Data(uint8_t val,uint8_t length);
static void Uart_Transmit(char data);
static void Uart_Transmit_Array(char *data_ptr, unsigned char length);
static void Clear_Tx_Buffer(char *buf,unsigned int length);
int main(void)
{
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	c4 56       	subi	r28, 0x64	; 100
     640:	d1 09       	sbc	r29, r1
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
    char tx_buf[100] = {0,};
     64c:	fe 01       	movw	r30, r28
     64e:	31 96       	adiw	r30, 0x01	; 1
     650:	84 e6       	ldi	r24, 0x64	; 100
     652:	df 01       	movw	r26, r30
     654:	1d 92       	st	X+, r1
     656:	8a 95       	dec	r24
     658:	e9 f7       	brne	.-6      	; 0x654 <main+0x1e>
    Port_Init();
     65a:	0e 94 49 00 	call	0x92	; 0x92 <Port_Init>
    Uart_Init();
     65e:	0e 94 51 00 	call	0xa2	; 0xa2 <Uart_Init>

    AD9832_Init();
     662:	0e 94 9e 02 	call	0x53c	; 0x53c <AD9832_Init>
    AD5204_Init();
     666:	0e 94 14 03 	call	0x628	; 0x628 <AD5204_Init>
    AD7705_Init();
     66a:	0e 94 df 01 	call	0x3be	; 0x3be <AD7705_Init>
    while (1) 
    {

        /* AD5204 저항 증폭 Scale 설정 */
        AD5204_Set_Scale(255);        
     66e:	8f ef       	ldi	r24, 0xFF	; 255
     670:	0e 94 05 03 	call	0x60a	; 0x60a <AD5204_Set_Scale>
        /* AD9832 Analog 출력 주파수[Hz] 설정 */
        AD9832_Set_Frequency(500);        
     674:	64 ef       	ldi	r22, 0xF4	; 244
     676:	71 e0       	ldi	r23, 0x01	; 1
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 3c 02 	call	0x478	; 0x478 <AD9832_Set_Frequency>
        /* AIN1 채널 ADC값 Read , Resolution : 1[mV] ex) 1000 -> 1[v] */
        AIN1_Voltage = AD7705_ADC_Result(CHN_AIN1,0);        
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	0e 94 50 01 	call	0x2a0	; 0x2a0 <AD7705_ADC_Result>
     68a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <AIN1_Voltage+0x1>
     68e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <AIN1_Voltage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     692:	bf ef       	ldi	r27, 0xFF	; 255
     694:	2f e3       	ldi	r18, 0x3F	; 63
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	b1 50       	subi	r27, 0x01	; 1
     69a:	20 40       	sbci	r18, 0x00	; 0
     69c:	80 40       	sbci	r24, 0x00	; 0
     69e:	e1 f7       	brne	.-8      	; 0x698 <main+0x62>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <main+0x6c>
     6a2:	00 00       	nop
        _delay_ms(100);
        /* AIN2 채널 ADC값 Read , Resolution : 1[mV] ex) 1000 -> 1[v] */
        AIN2_Voltage = AD7705_ADC_Result(CHN_AIN2,0);
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <AD7705_ADC_Result>
     6ae:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__data_end+0x1>
     6b2:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end>
     6b6:	9f ef       	ldi	r25, 0xFF	; 255
     6b8:	af e3       	ldi	r26, 0x3F	; 63
     6ba:	b2 e0       	ldi	r27, 0x02	; 2
     6bc:	91 50       	subi	r25, 0x01	; 1
     6be:	a0 40       	sbci	r26, 0x00	; 0
     6c0:	b0 40       	sbci	r27, 0x00	; 0
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <main+0x86>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <main+0x90>
     6c6:	00 00       	nop
        _delay_ms(100);
        /* Uart 출력 */
		sprintf(tx_buf,"Channel1 ADC : %d.%d[V] , Channel2 ADC : %d.%d[V] \n",(AIN1_Voltage/1000),(AIN1_Voltage%100),(AIN2_Voltage/1000),(AIN2_Voltage%100));
     6c8:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <__data_end>
     6cc:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <__data_end+0x1>
     6d0:	40 91 98 00 	lds	r20, 0x0098	; 0x800098 <AIN1_Voltage>
     6d4:	50 91 99 00 	lds	r21, 0x0099	; 0x800099 <AIN1_Voltage+0x1>
     6d8:	9f 01       	movw	r18, r30
     6da:	36 95       	lsr	r19
     6dc:	27 95       	ror	r18
     6de:	36 95       	lsr	r19
     6e0:	27 95       	ror	r18
     6e2:	ab e7       	ldi	r26, 0x7B	; 123
     6e4:	b4 e1       	ldi	r27, 0x14	; 20
     6e6:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__umulhisi3>
     6ea:	96 95       	lsr	r25
     6ec:	87 95       	ror	r24
     6ee:	14 e6       	ldi	r17, 0x64	; 100
     6f0:	18 9f       	mul	r17, r24
     6f2:	90 01       	movw	r18, r0
     6f4:	19 9f       	mul	r17, r25
     6f6:	30 0d       	add	r19, r0
     6f8:	11 24       	eor	r1, r1
     6fa:	cf 01       	movw	r24, r30
     6fc:	82 1b       	sub	r24, r18
     6fe:	93 0b       	sbc	r25, r19
     700:	9f 93       	push	r25
     702:	8f 93       	push	r24
     704:	9f 01       	movw	r18, r30
     706:	36 95       	lsr	r19
     708:	27 95       	ror	r18
     70a:	36 95       	lsr	r19
     70c:	27 95       	ror	r18
     70e:	36 95       	lsr	r19
     710:	27 95       	ror	r18
     712:	a5 ec       	ldi	r26, 0xC5	; 197
     714:	b0 e2       	ldi	r27, 0x20	; 32
     716:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__umulhisi3>
     71a:	92 95       	swap	r25
     71c:	82 95       	swap	r24
     71e:	8f 70       	andi	r24, 0x0F	; 15
     720:	89 27       	eor	r24, r25
     722:	9f 70       	andi	r25, 0x0F	; 15
     724:	89 27       	eor	r24, r25
     726:	9f 93       	push	r25
     728:	8f 93       	push	r24
     72a:	9a 01       	movw	r18, r20
     72c:	36 95       	lsr	r19
     72e:	27 95       	ror	r18
     730:	36 95       	lsr	r19
     732:	27 95       	ror	r18
     734:	ab e7       	ldi	r26, 0x7B	; 123
     736:	b4 e1       	ldi	r27, 0x14	; 20
     738:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__umulhisi3>
     73c:	96 95       	lsr	r25
     73e:	87 95       	ror	r24
     740:	18 9f       	mul	r17, r24
     742:	90 01       	movw	r18, r0
     744:	19 9f       	mul	r17, r25
     746:	30 0d       	add	r19, r0
     748:	11 24       	eor	r1, r1
     74a:	ca 01       	movw	r24, r20
     74c:	82 1b       	sub	r24, r18
     74e:	93 0b       	sbc	r25, r19
     750:	9f 93       	push	r25
     752:	8f 93       	push	r24
     754:	9a 01       	movw	r18, r20
     756:	36 95       	lsr	r19
     758:	27 95       	ror	r18
     75a:	36 95       	lsr	r19
     75c:	27 95       	ror	r18
     75e:	36 95       	lsr	r19
     760:	27 95       	ror	r18
     762:	a5 ec       	ldi	r26, 0xC5	; 197
     764:	b0 e2       	ldi	r27, 0x20	; 32
     766:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__umulhisi3>
     76a:	92 95       	swap	r25
     76c:	82 95       	swap	r24
     76e:	8f 70       	andi	r24, 0x0F	; 15
     770:	89 27       	eor	r24, r25
     772:	9f 70       	andi	r25, 0x0F	; 15
     774:	89 27       	eor	r24, r25
     776:	9f 93       	push	r25
     778:	8f 93       	push	r24
     77a:	82 e6       	ldi	r24, 0x62	; 98
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	9f 93       	push	r25
     780:	8f 93       	push	r24
     782:	8e 01       	movw	r16, r28
     784:	0f 5f       	subi	r16, 0xFF	; 255
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	1f 93       	push	r17
     78a:	0f 93       	push	r16
     78c:	0e 94 02 06 	call	0xc04	; 0xc04 <sprintf>
		Uart_Transmit_Array(tx_buf,strlen(tx_buf));
     790:	f8 01       	movw	r30, r16
     792:	01 90       	ld	r0, Z+
     794:	00 20       	and	r0, r0
     796:	e9 f7       	brne	.-6      	; 0x792 <main+0x15c>
     798:	31 97       	sbiw	r30, 0x01	; 1
     79a:	bf 01       	movw	r22, r30
     79c:	60 1b       	sub	r22, r16
     79e:	71 0b       	sbc	r23, r17
     7a0:	c8 01       	movw	r24, r16
     7a2:	0e 94 5e 00 	call	0xbc	; 0xbc <Uart_Transmit_Array>
		Clear_Tx_Buffer(tx_buf,100);
     7a6:	64 e6       	ldi	r22, 0x64	; 100
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	c8 01       	movw	r24, r16
     7ac:	0e 94 75 00 	call	0xea	; 0xea <Clear_Tx_Buffer>
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	97 e4       	ldi	r25, 0x47	; 71
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <main+0x17e>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <main+0x184>
     7ba:	00 00       	nop
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	53 cf       	rjmp	.-346    	; 0x66e <main+0x38>

000007c8 <__subsf3>:
     7c8:	50 58       	subi	r21, 0x80	; 128

000007ca <__addsf3>:
     7ca:	bb 27       	eor	r27, r27
     7cc:	aa 27       	eor	r26, r26
     7ce:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__addsf3x>
     7d2:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_round>
     7d6:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_pscA>
     7da:	38 f0       	brcs	.+14     	; 0x7ea <__addsf3+0x20>
     7dc:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_pscB>
     7e0:	20 f0       	brcs	.+8      	; 0x7ea <__addsf3+0x20>
     7e2:	39 f4       	brne	.+14     	; 0x7f2 <__addsf3+0x28>
     7e4:	9f 3f       	cpi	r25, 0xFF	; 255
     7e6:	19 f4       	brne	.+6      	; 0x7ee <__addsf3+0x24>
     7e8:	26 f4       	brtc	.+8      	; 0x7f2 <__addsf3+0x28>
     7ea:	0c 94 c3 04 	jmp	0x986	; 0x986 <__fp_nan>
     7ee:	0e f4       	brtc	.+2      	; 0x7f2 <__addsf3+0x28>
     7f0:	e0 95       	com	r30
     7f2:	e7 fb       	bst	r30, 7
     7f4:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_inf>

000007f8 <__addsf3x>:
     7f8:	e9 2f       	mov	r30, r25
     7fa:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_split3>
     7fe:	58 f3       	brcs	.-42     	; 0x7d6 <__addsf3+0xc>
     800:	ba 17       	cp	r27, r26
     802:	62 07       	cpc	r22, r18
     804:	73 07       	cpc	r23, r19
     806:	84 07       	cpc	r24, r20
     808:	95 07       	cpc	r25, r21
     80a:	20 f0       	brcs	.+8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     80c:	79 f4       	brne	.+30     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     80e:	a6 f5       	brtc	.+104    	; 0x878 <__stack+0x19>
     810:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_zero>
     814:	0e f4       	brtc	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     816:	e0 95       	com	r30
     818:	0b 2e       	mov	r0, r27
     81a:	ba 2f       	mov	r27, r26
     81c:	a0 2d       	mov	r26, r0
     81e:	0b 01       	movw	r0, r22
     820:	b9 01       	movw	r22, r18
     822:	90 01       	movw	r18, r0
     824:	0c 01       	movw	r0, r24
     826:	ca 01       	movw	r24, r20
     828:	a0 01       	movw	r20, r0
     82a:	11 24       	eor	r1, r1
     82c:	ff 27       	eor	r31, r31
     82e:	59 1b       	sub	r21, r25
     830:	99 f0       	breq	.+38     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     832:	59 3f       	cpi	r21, 0xF9	; 249
     834:	50 f4       	brcc	.+20     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     836:	50 3e       	cpi	r21, 0xE0	; 224
     838:	68 f1       	brcs	.+90     	; 0x894 <__stack+0x35>
     83a:	1a 16       	cp	r1, r26
     83c:	f0 40       	sbci	r31, 0x00	; 0
     83e:	a2 2f       	mov	r26, r18
     840:	23 2f       	mov	r18, r19
     842:	34 2f       	mov	r19, r20
     844:	44 27       	eor	r20, r20
     846:	58 5f       	subi	r21, 0xF8	; 248
     848:	f3 cf       	rjmp	.-26     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     84a:	46 95       	lsr	r20
     84c:	37 95       	ror	r19
     84e:	27 95       	ror	r18
     850:	a7 95       	ror	r26
     852:	f0 40       	sbci	r31, 0x00	; 0
     854:	53 95       	inc	r21
     856:	c9 f7       	brne	.-14     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     858:	7e f4       	brtc	.+30     	; 0x878 <__stack+0x19>
     85a:	1f 16       	cp	r1, r31
     85c:	ba 0b       	sbc	r27, r26
     85e:	62 0b       	sbc	r22, r18
     860:	73 0b       	sbc	r23, r19
     862:	84 0b       	sbc	r24, r20
     864:	ba f0       	brmi	.+46     	; 0x894 <__stack+0x35>
     866:	91 50       	subi	r25, 0x01	; 1
     868:	a1 f0       	breq	.+40     	; 0x892 <__stack+0x33>
     86a:	ff 0f       	add	r31, r31
     86c:	bb 1f       	adc	r27, r27
     86e:	66 1f       	adc	r22, r22
     870:	77 1f       	adc	r23, r23
     872:	88 1f       	adc	r24, r24
     874:	c2 f7       	brpl	.-16     	; 0x866 <__stack+0x7>
     876:	0e c0       	rjmp	.+28     	; 0x894 <__stack+0x35>
     878:	ba 0f       	add	r27, r26
     87a:	62 1f       	adc	r22, r18
     87c:	73 1f       	adc	r23, r19
     87e:	84 1f       	adc	r24, r20
     880:	48 f4       	brcc	.+18     	; 0x894 <__stack+0x35>
     882:	87 95       	ror	r24
     884:	77 95       	ror	r23
     886:	67 95       	ror	r22
     888:	b7 95       	ror	r27
     88a:	f7 95       	ror	r31
     88c:	9e 3f       	cpi	r25, 0xFE	; 254
     88e:	08 f0       	brcs	.+2      	; 0x892 <__stack+0x33>
     890:	b0 cf       	rjmp	.-160    	; 0x7f2 <__addsf3+0x28>
     892:	93 95       	inc	r25
     894:	88 0f       	add	r24, r24
     896:	08 f0       	brcs	.+2      	; 0x89a <__stack+0x3b>
     898:	99 27       	eor	r25, r25
     89a:	ee 0f       	add	r30, r30
     89c:	97 95       	ror	r25
     89e:	87 95       	ror	r24
     8a0:	08 95       	ret

000008a2 <__fixunssfsi>:
     8a2:	0e 94 ed 04 	call	0x9da	; 0x9da <__fp_splitA>
     8a6:	88 f0       	brcs	.+34     	; 0x8ca <__fixunssfsi+0x28>
     8a8:	9f 57       	subi	r25, 0x7F	; 127
     8aa:	98 f0       	brcs	.+38     	; 0x8d2 <__fixunssfsi+0x30>
     8ac:	b9 2f       	mov	r27, r25
     8ae:	99 27       	eor	r25, r25
     8b0:	b7 51       	subi	r27, 0x17	; 23
     8b2:	b0 f0       	brcs	.+44     	; 0x8e0 <__fixunssfsi+0x3e>
     8b4:	e1 f0       	breq	.+56     	; 0x8ee <__fixunssfsi+0x4c>
     8b6:	66 0f       	add	r22, r22
     8b8:	77 1f       	adc	r23, r23
     8ba:	88 1f       	adc	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	1a f0       	brmi	.+6      	; 0x8c6 <__fixunssfsi+0x24>
     8c0:	ba 95       	dec	r27
     8c2:	c9 f7       	brne	.-14     	; 0x8b6 <__fixunssfsi+0x14>
     8c4:	14 c0       	rjmp	.+40     	; 0x8ee <__fixunssfsi+0x4c>
     8c6:	b1 30       	cpi	r27, 0x01	; 1
     8c8:	91 f0       	breq	.+36     	; 0x8ee <__fixunssfsi+0x4c>
     8ca:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fp_zero>
     8ce:	b1 e0       	ldi	r27, 0x01	; 1
     8d0:	08 95       	ret
     8d2:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_zero>
     8d6:	67 2f       	mov	r22, r23
     8d8:	78 2f       	mov	r23, r24
     8da:	88 27       	eor	r24, r24
     8dc:	b8 5f       	subi	r27, 0xF8	; 248
     8de:	39 f0       	breq	.+14     	; 0x8ee <__fixunssfsi+0x4c>
     8e0:	b9 3f       	cpi	r27, 0xF9	; 249
     8e2:	cc f3       	brlt	.-14     	; 0x8d6 <__fixunssfsi+0x34>
     8e4:	86 95       	lsr	r24
     8e6:	77 95       	ror	r23
     8e8:	67 95       	ror	r22
     8ea:	b3 95       	inc	r27
     8ec:	d9 f7       	brne	.-10     	; 0x8e4 <__fixunssfsi+0x42>
     8ee:	3e f4       	brtc	.+14     	; 0x8fe <__fixunssfsi+0x5c>
     8f0:	90 95       	com	r25
     8f2:	80 95       	com	r24
     8f4:	70 95       	com	r23
     8f6:	61 95       	neg	r22
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	8f 4f       	sbci	r24, 0xFF	; 255
     8fc:	9f 4f       	sbci	r25, 0xFF	; 255
     8fe:	08 95       	ret

00000900 <__floatunsisf>:
     900:	e8 94       	clt
     902:	09 c0       	rjmp	.+18     	; 0x916 <__floatsisf+0x12>

00000904 <__floatsisf>:
     904:	97 fb       	bst	r25, 7
     906:	3e f4       	brtc	.+14     	; 0x916 <__floatsisf+0x12>
     908:	90 95       	com	r25
     90a:	80 95       	com	r24
     90c:	70 95       	com	r23
     90e:	61 95       	neg	r22
     910:	7f 4f       	sbci	r23, 0xFF	; 255
     912:	8f 4f       	sbci	r24, 0xFF	; 255
     914:	9f 4f       	sbci	r25, 0xFF	; 255
     916:	99 23       	and	r25, r25
     918:	a9 f0       	breq	.+42     	; 0x944 <__floatsisf+0x40>
     91a:	f9 2f       	mov	r31, r25
     91c:	96 e9       	ldi	r25, 0x96	; 150
     91e:	bb 27       	eor	r27, r27
     920:	93 95       	inc	r25
     922:	f6 95       	lsr	r31
     924:	87 95       	ror	r24
     926:	77 95       	ror	r23
     928:	67 95       	ror	r22
     92a:	b7 95       	ror	r27
     92c:	f1 11       	cpse	r31, r1
     92e:	f8 cf       	rjmp	.-16     	; 0x920 <__floatsisf+0x1c>
     930:	fa f4       	brpl	.+62     	; 0x970 <__floatsisf+0x6c>
     932:	bb 0f       	add	r27, r27
     934:	11 f4       	brne	.+4      	; 0x93a <__floatsisf+0x36>
     936:	60 ff       	sbrs	r22, 0
     938:	1b c0       	rjmp	.+54     	; 0x970 <__floatsisf+0x6c>
     93a:	6f 5f       	subi	r22, 0xFF	; 255
     93c:	7f 4f       	sbci	r23, 0xFF	; 255
     93e:	8f 4f       	sbci	r24, 0xFF	; 255
     940:	9f 4f       	sbci	r25, 0xFF	; 255
     942:	16 c0       	rjmp	.+44     	; 0x970 <__floatsisf+0x6c>
     944:	88 23       	and	r24, r24
     946:	11 f0       	breq	.+4      	; 0x94c <__floatsisf+0x48>
     948:	96 e9       	ldi	r25, 0x96	; 150
     94a:	11 c0       	rjmp	.+34     	; 0x96e <__floatsisf+0x6a>
     94c:	77 23       	and	r23, r23
     94e:	21 f0       	breq	.+8      	; 0x958 <__floatsisf+0x54>
     950:	9e e8       	ldi	r25, 0x8E	; 142
     952:	87 2f       	mov	r24, r23
     954:	76 2f       	mov	r23, r22
     956:	05 c0       	rjmp	.+10     	; 0x962 <__floatsisf+0x5e>
     958:	66 23       	and	r22, r22
     95a:	71 f0       	breq	.+28     	; 0x978 <__floatsisf+0x74>
     95c:	96 e8       	ldi	r25, 0x86	; 134
     95e:	86 2f       	mov	r24, r22
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	2a f0       	brmi	.+10     	; 0x970 <__floatsisf+0x6c>
     966:	9a 95       	dec	r25
     968:	66 0f       	add	r22, r22
     96a:	77 1f       	adc	r23, r23
     96c:	88 1f       	adc	r24, r24
     96e:	da f7       	brpl	.-10     	; 0x966 <__floatsisf+0x62>
     970:	88 0f       	add	r24, r24
     972:	96 95       	lsr	r25
     974:	87 95       	ror	r24
     976:	97 f9       	bld	r25, 7
     978:	08 95       	ret

0000097a <__fp_inf>:
     97a:	97 f9       	bld	r25, 7
     97c:	9f 67       	ori	r25, 0x7F	; 127
     97e:	80 e8       	ldi	r24, 0x80	; 128
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	08 95       	ret

00000986 <__fp_nan>:
     986:	9f ef       	ldi	r25, 0xFF	; 255
     988:	80 ec       	ldi	r24, 0xC0	; 192
     98a:	08 95       	ret

0000098c <__fp_pscA>:
     98c:	00 24       	eor	r0, r0
     98e:	0a 94       	dec	r0
     990:	16 16       	cp	r1, r22
     992:	17 06       	cpc	r1, r23
     994:	18 06       	cpc	r1, r24
     996:	09 06       	cpc	r0, r25
     998:	08 95       	ret

0000099a <__fp_pscB>:
     99a:	00 24       	eor	r0, r0
     99c:	0a 94       	dec	r0
     99e:	12 16       	cp	r1, r18
     9a0:	13 06       	cpc	r1, r19
     9a2:	14 06       	cpc	r1, r20
     9a4:	05 06       	cpc	r0, r21
     9a6:	08 95       	ret

000009a8 <__fp_round>:
     9a8:	09 2e       	mov	r0, r25
     9aa:	03 94       	inc	r0
     9ac:	00 0c       	add	r0, r0
     9ae:	11 f4       	brne	.+4      	; 0x9b4 <__fp_round+0xc>
     9b0:	88 23       	and	r24, r24
     9b2:	52 f0       	brmi	.+20     	; 0x9c8 <__fp_round+0x20>
     9b4:	bb 0f       	add	r27, r27
     9b6:	40 f4       	brcc	.+16     	; 0x9c8 <__fp_round+0x20>
     9b8:	bf 2b       	or	r27, r31
     9ba:	11 f4       	brne	.+4      	; 0x9c0 <__fp_round+0x18>
     9bc:	60 ff       	sbrs	r22, 0
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__fp_round+0x20>
     9c0:	6f 5f       	subi	r22, 0xFF	; 255
     9c2:	7f 4f       	sbci	r23, 0xFF	; 255
     9c4:	8f 4f       	sbci	r24, 0xFF	; 255
     9c6:	9f 4f       	sbci	r25, 0xFF	; 255
     9c8:	08 95       	ret

000009ca <__fp_split3>:
     9ca:	57 fd       	sbrc	r21, 7
     9cc:	90 58       	subi	r25, 0x80	; 128
     9ce:	44 0f       	add	r20, r20
     9d0:	55 1f       	adc	r21, r21
     9d2:	59 f0       	breq	.+22     	; 0x9ea <__fp_splitA+0x10>
     9d4:	5f 3f       	cpi	r21, 0xFF	; 255
     9d6:	71 f0       	breq	.+28     	; 0x9f4 <__fp_splitA+0x1a>
     9d8:	47 95       	ror	r20

000009da <__fp_splitA>:
     9da:	88 0f       	add	r24, r24
     9dc:	97 fb       	bst	r25, 7
     9de:	99 1f       	adc	r25, r25
     9e0:	61 f0       	breq	.+24     	; 0x9fa <__fp_splitA+0x20>
     9e2:	9f 3f       	cpi	r25, 0xFF	; 255
     9e4:	79 f0       	breq	.+30     	; 0xa04 <__fp_splitA+0x2a>
     9e6:	87 95       	ror	r24
     9e8:	08 95       	ret
     9ea:	12 16       	cp	r1, r18
     9ec:	13 06       	cpc	r1, r19
     9ee:	14 06       	cpc	r1, r20
     9f0:	55 1f       	adc	r21, r21
     9f2:	f2 cf       	rjmp	.-28     	; 0x9d8 <__fp_split3+0xe>
     9f4:	46 95       	lsr	r20
     9f6:	f1 df       	rcall	.-30     	; 0x9da <__fp_splitA>
     9f8:	08 c0       	rjmp	.+16     	; 0xa0a <__fp_splitA+0x30>
     9fa:	16 16       	cp	r1, r22
     9fc:	17 06       	cpc	r1, r23
     9fe:	18 06       	cpc	r1, r24
     a00:	99 1f       	adc	r25, r25
     a02:	f1 cf       	rjmp	.-30     	; 0x9e6 <__fp_splitA+0xc>
     a04:	86 95       	lsr	r24
     a06:	71 05       	cpc	r23, r1
     a08:	61 05       	cpc	r22, r1
     a0a:	08 94       	sec
     a0c:	08 95       	ret

00000a0e <__fp_zero>:
     a0e:	e8 94       	clt

00000a10 <__fp_szero>:
     a10:	bb 27       	eor	r27, r27
     a12:	66 27       	eor	r22, r22
     a14:	77 27       	eor	r23, r23
     a16:	cb 01       	movw	r24, r22
     a18:	97 f9       	bld	r25, 7
     a1a:	08 95       	ret

00000a1c <__mulsf3>:
     a1c:	0e 94 21 05 	call	0xa42	; 0xa42 <__mulsf3x>
     a20:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_round>
     a24:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_pscA>
     a28:	38 f0       	brcs	.+14     	; 0xa38 <__mulsf3+0x1c>
     a2a:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_pscB>
     a2e:	20 f0       	brcs	.+8      	; 0xa38 <__mulsf3+0x1c>
     a30:	95 23       	and	r25, r21
     a32:	11 f0       	breq	.+4      	; 0xa38 <__mulsf3+0x1c>
     a34:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_inf>
     a38:	0c 94 c3 04 	jmp	0x986	; 0x986 <__fp_nan>
     a3c:	11 24       	eor	r1, r1
     a3e:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_szero>

00000a42 <__mulsf3x>:
     a42:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_split3>
     a46:	70 f3       	brcs	.-36     	; 0xa24 <__mulsf3+0x8>

00000a48 <__mulsf3_pse>:
     a48:	95 9f       	mul	r25, r21
     a4a:	c1 f3       	breq	.-16     	; 0xa3c <__mulsf3+0x20>
     a4c:	95 0f       	add	r25, r21
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	55 1f       	adc	r21, r21
     a52:	62 9f       	mul	r22, r18
     a54:	f0 01       	movw	r30, r0
     a56:	72 9f       	mul	r23, r18
     a58:	bb 27       	eor	r27, r27
     a5a:	f0 0d       	add	r31, r0
     a5c:	b1 1d       	adc	r27, r1
     a5e:	63 9f       	mul	r22, r19
     a60:	aa 27       	eor	r26, r26
     a62:	f0 0d       	add	r31, r0
     a64:	b1 1d       	adc	r27, r1
     a66:	aa 1f       	adc	r26, r26
     a68:	64 9f       	mul	r22, r20
     a6a:	66 27       	eor	r22, r22
     a6c:	b0 0d       	add	r27, r0
     a6e:	a1 1d       	adc	r26, r1
     a70:	66 1f       	adc	r22, r22
     a72:	82 9f       	mul	r24, r18
     a74:	22 27       	eor	r18, r18
     a76:	b0 0d       	add	r27, r0
     a78:	a1 1d       	adc	r26, r1
     a7a:	62 1f       	adc	r22, r18
     a7c:	73 9f       	mul	r23, r19
     a7e:	b0 0d       	add	r27, r0
     a80:	a1 1d       	adc	r26, r1
     a82:	62 1f       	adc	r22, r18
     a84:	83 9f       	mul	r24, r19
     a86:	a0 0d       	add	r26, r0
     a88:	61 1d       	adc	r22, r1
     a8a:	22 1f       	adc	r18, r18
     a8c:	74 9f       	mul	r23, r20
     a8e:	33 27       	eor	r19, r19
     a90:	a0 0d       	add	r26, r0
     a92:	61 1d       	adc	r22, r1
     a94:	23 1f       	adc	r18, r19
     a96:	84 9f       	mul	r24, r20
     a98:	60 0d       	add	r22, r0
     a9a:	21 1d       	adc	r18, r1
     a9c:	82 2f       	mov	r24, r18
     a9e:	76 2f       	mov	r23, r22
     aa0:	6a 2f       	mov	r22, r26
     aa2:	11 24       	eor	r1, r1
     aa4:	9f 57       	subi	r25, 0x7F	; 127
     aa6:	50 40       	sbci	r21, 0x00	; 0
     aa8:	9a f0       	brmi	.+38     	; 0xad0 <__mulsf3_pse+0x88>
     aaa:	f1 f0       	breq	.+60     	; 0xae8 <__mulsf3_pse+0xa0>
     aac:	88 23       	and	r24, r24
     aae:	4a f0       	brmi	.+18     	; 0xac2 <__mulsf3_pse+0x7a>
     ab0:	ee 0f       	add	r30, r30
     ab2:	ff 1f       	adc	r31, r31
     ab4:	bb 1f       	adc	r27, r27
     ab6:	66 1f       	adc	r22, r22
     ab8:	77 1f       	adc	r23, r23
     aba:	88 1f       	adc	r24, r24
     abc:	91 50       	subi	r25, 0x01	; 1
     abe:	50 40       	sbci	r21, 0x00	; 0
     ac0:	a9 f7       	brne	.-22     	; 0xaac <__mulsf3_pse+0x64>
     ac2:	9e 3f       	cpi	r25, 0xFE	; 254
     ac4:	51 05       	cpc	r21, r1
     ac6:	80 f0       	brcs	.+32     	; 0xae8 <__mulsf3_pse+0xa0>
     ac8:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_inf>
     acc:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_szero>
     ad0:	5f 3f       	cpi	r21, 0xFF	; 255
     ad2:	e4 f3       	brlt	.-8      	; 0xacc <__mulsf3_pse+0x84>
     ad4:	98 3e       	cpi	r25, 0xE8	; 232
     ad6:	d4 f3       	brlt	.-12     	; 0xacc <__mulsf3_pse+0x84>
     ad8:	86 95       	lsr	r24
     ada:	77 95       	ror	r23
     adc:	67 95       	ror	r22
     ade:	b7 95       	ror	r27
     ae0:	f7 95       	ror	r31
     ae2:	e7 95       	ror	r30
     ae4:	9f 5f       	subi	r25, 0xFF	; 255
     ae6:	c1 f7       	brne	.-16     	; 0xad8 <__mulsf3_pse+0x90>
     ae8:	fe 2b       	or	r31, r30
     aea:	88 0f       	add	r24, r24
     aec:	91 1d       	adc	r25, r1
     aee:	96 95       	lsr	r25
     af0:	87 95       	ror	r24
     af2:	97 f9       	bld	r25, 7
     af4:	08 95       	ret

00000af6 <__umulhisi3>:
     af6:	a2 9f       	mul	r26, r18
     af8:	b0 01       	movw	r22, r0
     afa:	b3 9f       	mul	r27, r19
     afc:	c0 01       	movw	r24, r0
     afe:	a3 9f       	mul	r26, r19
     b00:	70 0d       	add	r23, r0
     b02:	81 1d       	adc	r24, r1
     b04:	11 24       	eor	r1, r1
     b06:	91 1d       	adc	r25, r1
     b08:	b2 9f       	mul	r27, r18
     b0a:	70 0d       	add	r23, r0
     b0c:	81 1d       	adc	r24, r1
     b0e:	11 24       	eor	r1, r1
     b10:	91 1d       	adc	r25, r1
     b12:	08 95       	ret

00000b14 <__umoddi3>:
     b14:	68 94       	set
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <__udivdi3_umoddi3>

00000b18 <__udivdi3>:
     b18:	e8 94       	clt

00000b1a <__udivdi3_umoddi3>:
     b1a:	8f 92       	push	r8
     b1c:	9f 92       	push	r9
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	0e 94 98 05 	call	0xb30	; 0xb30 <__udivmod64>
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	9f 90       	pop	r9
     b2c:	8f 90       	pop	r8
     b2e:	08 95       	ret

00000b30 <__udivmod64>:
     b30:	88 24       	eor	r8, r8
     b32:	99 24       	eor	r9, r9
     b34:	f4 01       	movw	r30, r8
     b36:	e4 01       	movw	r28, r8
     b38:	b0 e4       	ldi	r27, 0x40	; 64
     b3a:	9f 93       	push	r25
     b3c:	aa 27       	eor	r26, r26
     b3e:	9a 15       	cp	r25, r10
     b40:	8b 04       	cpc	r8, r11
     b42:	9c 04       	cpc	r9, r12
     b44:	ed 05       	cpc	r30, r13
     b46:	fe 05       	cpc	r31, r14
     b48:	cf 05       	cpc	r28, r15
     b4a:	d0 07       	cpc	r29, r16
     b4c:	a1 07       	cpc	r26, r17
     b4e:	98 f4       	brcc	.+38     	; 0xb76 <__udivmod64+0x46>
     b50:	ad 2f       	mov	r26, r29
     b52:	dc 2f       	mov	r29, r28
     b54:	cf 2f       	mov	r28, r31
     b56:	fe 2f       	mov	r31, r30
     b58:	e9 2d       	mov	r30, r9
     b5a:	98 2c       	mov	r9, r8
     b5c:	89 2e       	mov	r8, r25
     b5e:	98 2f       	mov	r25, r24
     b60:	87 2f       	mov	r24, r23
     b62:	76 2f       	mov	r23, r22
     b64:	65 2f       	mov	r22, r21
     b66:	54 2f       	mov	r21, r20
     b68:	43 2f       	mov	r20, r19
     b6a:	32 2f       	mov	r19, r18
     b6c:	22 27       	eor	r18, r18
     b6e:	b8 50       	subi	r27, 0x08	; 8
     b70:	31 f7       	brne	.-52     	; 0xb3e <__udivmod64+0xe>
     b72:	bf 91       	pop	r27
     b74:	27 c0       	rjmp	.+78     	; 0xbc4 <__udivmod64+0x94>
     b76:	1b 2e       	mov	r1, r27
     b78:	bf 91       	pop	r27
     b7a:	bb 27       	eor	r27, r27
     b7c:	22 0f       	add	r18, r18
     b7e:	33 1f       	adc	r19, r19
     b80:	44 1f       	adc	r20, r20
     b82:	55 1f       	adc	r21, r21
     b84:	66 1f       	adc	r22, r22
     b86:	77 1f       	adc	r23, r23
     b88:	88 1f       	adc	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	88 1c       	adc	r8, r8
     b8e:	99 1c       	adc	r9, r9
     b90:	ee 1f       	adc	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	cc 1f       	adc	r28, r28
     b96:	dd 1f       	adc	r29, r29
     b98:	aa 1f       	adc	r26, r26
     b9a:	bb 1f       	adc	r27, r27
     b9c:	8a 14       	cp	r8, r10
     b9e:	9b 04       	cpc	r9, r11
     ba0:	ec 05       	cpc	r30, r12
     ba2:	fd 05       	cpc	r31, r13
     ba4:	ce 05       	cpc	r28, r14
     ba6:	df 05       	cpc	r29, r15
     ba8:	a0 07       	cpc	r26, r16
     baa:	b1 07       	cpc	r27, r17
     bac:	48 f0       	brcs	.+18     	; 0xbc0 <__udivmod64+0x90>
     bae:	8a 18       	sub	r8, r10
     bb0:	9b 08       	sbc	r9, r11
     bb2:	ec 09       	sbc	r30, r12
     bb4:	fd 09       	sbc	r31, r13
     bb6:	ce 09       	sbc	r28, r14
     bb8:	df 09       	sbc	r29, r15
     bba:	a0 0b       	sbc	r26, r16
     bbc:	b1 0b       	sbc	r27, r17
     bbe:	21 60       	ori	r18, 0x01	; 1
     bc0:	1a 94       	dec	r1
     bc2:	e1 f6       	brne	.-72     	; 0xb7c <__udivmod64+0x4c>
     bc4:	2e f4       	brtc	.+10     	; 0xbd0 <__udivmod64+0xa0>
     bc6:	94 01       	movw	r18, r8
     bc8:	af 01       	movw	r20, r30
     bca:	be 01       	movw	r22, r28
     bcc:	cd 01       	movw	r24, r26
     bce:	00 0c       	add	r0, r0
     bd0:	08 95       	ret

00000bd2 <__ashldi3>:
     bd2:	0f 93       	push	r16
     bd4:	08 30       	cpi	r16, 0x08	; 8
     bd6:	90 f0       	brcs	.+36     	; 0xbfc <__ashldi3+0x2a>
     bd8:	98 2f       	mov	r25, r24
     bda:	87 2f       	mov	r24, r23
     bdc:	76 2f       	mov	r23, r22
     bde:	65 2f       	mov	r22, r21
     be0:	54 2f       	mov	r21, r20
     be2:	43 2f       	mov	r20, r19
     be4:	32 2f       	mov	r19, r18
     be6:	22 27       	eor	r18, r18
     be8:	08 50       	subi	r16, 0x08	; 8
     bea:	f4 cf       	rjmp	.-24     	; 0xbd4 <__ashldi3+0x2>
     bec:	22 0f       	add	r18, r18
     bee:	33 1f       	adc	r19, r19
     bf0:	44 1f       	adc	r20, r20
     bf2:	55 1f       	adc	r21, r21
     bf4:	66 1f       	adc	r22, r22
     bf6:	77 1f       	adc	r23, r23
     bf8:	88 1f       	adc	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 95       	dec	r16
     bfe:	b2 f7       	brpl	.-20     	; 0xbec <__ashldi3+0x1a>
     c00:	0f 91       	pop	r16
     c02:	08 95       	ret

00000c04 <sprintf>:
     c04:	ae e0       	ldi	r26, 0x0E	; 14
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e8 e0       	ldi	r30, 0x08	; 8
     c0a:	f6 e0       	ldi	r31, 0x06	; 6
     c0c:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__prologue_saves__+0x1c>
     c10:	0d 89       	ldd	r16, Y+21	; 0x15
     c12:	1e 89       	ldd	r17, Y+22	; 0x16
     c14:	86 e0       	ldi	r24, 0x06	; 6
     c16:	8c 83       	std	Y+4, r24	; 0x04
     c18:	1a 83       	std	Y+2, r17	; 0x02
     c1a:	09 83       	std	Y+1, r16	; 0x01
     c1c:	8f ef       	ldi	r24, 0xFF	; 255
     c1e:	9f e7       	ldi	r25, 0x7F	; 127
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	ae 01       	movw	r20, r28
     c26:	47 5e       	subi	r20, 0xE7	; 231
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	6f 89       	ldd	r22, Y+23	; 0x17
     c2c:	78 8d       	ldd	r23, Y+24	; 0x18
     c2e:	ce 01       	movw	r24, r28
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	0e 94 24 06 	call	0xc48	; 0xc48 <vfprintf>
     c36:	ef 81       	ldd	r30, Y+7	; 0x07
     c38:	f8 85       	ldd	r31, Y+8	; 0x08
     c3a:	e0 0f       	add	r30, r16
     c3c:	f1 1f       	adc	r31, r17
     c3e:	10 82       	st	Z, r1
     c40:	2e 96       	adiw	r28, 0x0e	; 14
     c42:	e4 e0       	ldi	r30, 0x04	; 4
     c44:	0c 94 df 08 	jmp	0x11be	; 0x11be <__epilogue_restores__+0x1c>

00000c48 <vfprintf>:
     c48:	ab e0       	ldi	r26, 0x0B	; 11
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	ea e2       	ldi	r30, 0x2A	; 42
     c4e:	f6 e0       	ldi	r31, 0x06	; 6
     c50:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__prologue_saves__>
     c54:	6c 01       	movw	r12, r24
     c56:	7b 01       	movw	r14, r22
     c58:	8a 01       	movw	r16, r20
     c5a:	fc 01       	movw	r30, r24
     c5c:	17 82       	std	Z+7, r1	; 0x07
     c5e:	16 82       	std	Z+6, r1	; 0x06
     c60:	83 81       	ldd	r24, Z+3	; 0x03
     c62:	81 ff       	sbrs	r24, 1
     c64:	cc c1       	rjmp	.+920    	; 0xffe <vfprintf+0x3b6>
     c66:	ce 01       	movw	r24, r28
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	3c 01       	movw	r6, r24
     c6c:	f6 01       	movw	r30, r12
     c6e:	93 81       	ldd	r25, Z+3	; 0x03
     c70:	f7 01       	movw	r30, r14
     c72:	93 fd       	sbrc	r25, 3
     c74:	85 91       	lpm	r24, Z+
     c76:	93 ff       	sbrs	r25, 3
     c78:	81 91       	ld	r24, Z+
     c7a:	7f 01       	movw	r14, r30
     c7c:	88 23       	and	r24, r24
     c7e:	09 f4       	brne	.+2      	; 0xc82 <vfprintf+0x3a>
     c80:	ba c1       	rjmp	.+884    	; 0xff6 <vfprintf+0x3ae>
     c82:	85 32       	cpi	r24, 0x25	; 37
     c84:	39 f4       	brne	.+14     	; 0xc94 <vfprintf+0x4c>
     c86:	93 fd       	sbrc	r25, 3
     c88:	85 91       	lpm	r24, Z+
     c8a:	93 ff       	sbrs	r25, 3
     c8c:	81 91       	ld	r24, Z+
     c8e:	7f 01       	movw	r14, r30
     c90:	85 32       	cpi	r24, 0x25	; 37
     c92:	29 f4       	brne	.+10     	; 0xc9e <vfprintf+0x56>
     c94:	b6 01       	movw	r22, r12
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     c9c:	e7 cf       	rjmp	.-50     	; 0xc6c <vfprintf+0x24>
     c9e:	91 2c       	mov	r9, r1
     ca0:	21 2c       	mov	r2, r1
     ca2:	31 2c       	mov	r3, r1
     ca4:	ff e1       	ldi	r31, 0x1F	; 31
     ca6:	f3 15       	cp	r31, r3
     ca8:	d8 f0       	brcs	.+54     	; 0xce0 <vfprintf+0x98>
     caa:	8b 32       	cpi	r24, 0x2B	; 43
     cac:	79 f0       	breq	.+30     	; 0xccc <vfprintf+0x84>
     cae:	38 f4       	brcc	.+14     	; 0xcbe <vfprintf+0x76>
     cb0:	80 32       	cpi	r24, 0x20	; 32
     cb2:	79 f0       	breq	.+30     	; 0xcd2 <vfprintf+0x8a>
     cb4:	83 32       	cpi	r24, 0x23	; 35
     cb6:	a1 f4       	brne	.+40     	; 0xce0 <vfprintf+0x98>
     cb8:	23 2d       	mov	r18, r3
     cba:	20 61       	ori	r18, 0x10	; 16
     cbc:	1d c0       	rjmp	.+58     	; 0xcf8 <vfprintf+0xb0>
     cbe:	8d 32       	cpi	r24, 0x2D	; 45
     cc0:	61 f0       	breq	.+24     	; 0xcda <vfprintf+0x92>
     cc2:	80 33       	cpi	r24, 0x30	; 48
     cc4:	69 f4       	brne	.+26     	; 0xce0 <vfprintf+0x98>
     cc6:	23 2d       	mov	r18, r3
     cc8:	21 60       	ori	r18, 0x01	; 1
     cca:	16 c0       	rjmp	.+44     	; 0xcf8 <vfprintf+0xb0>
     ccc:	83 2d       	mov	r24, r3
     cce:	82 60       	ori	r24, 0x02	; 2
     cd0:	38 2e       	mov	r3, r24
     cd2:	e3 2d       	mov	r30, r3
     cd4:	e4 60       	ori	r30, 0x04	; 4
     cd6:	3e 2e       	mov	r3, r30
     cd8:	2a c0       	rjmp	.+84     	; 0xd2e <vfprintf+0xe6>
     cda:	f3 2d       	mov	r31, r3
     cdc:	f8 60       	ori	r31, 0x08	; 8
     cde:	1d c0       	rjmp	.+58     	; 0xd1a <vfprintf+0xd2>
     ce0:	37 fc       	sbrc	r3, 7
     ce2:	2d c0       	rjmp	.+90     	; 0xd3e <vfprintf+0xf6>
     ce4:	20 ed       	ldi	r18, 0xD0	; 208
     ce6:	28 0f       	add	r18, r24
     ce8:	2a 30       	cpi	r18, 0x0A	; 10
     cea:	40 f0       	brcs	.+16     	; 0xcfc <vfprintf+0xb4>
     cec:	8e 32       	cpi	r24, 0x2E	; 46
     cee:	b9 f4       	brne	.+46     	; 0xd1e <vfprintf+0xd6>
     cf0:	36 fc       	sbrc	r3, 6
     cf2:	81 c1       	rjmp	.+770    	; 0xff6 <vfprintf+0x3ae>
     cf4:	23 2d       	mov	r18, r3
     cf6:	20 64       	ori	r18, 0x40	; 64
     cf8:	32 2e       	mov	r3, r18
     cfa:	19 c0       	rjmp	.+50     	; 0xd2e <vfprintf+0xe6>
     cfc:	36 fe       	sbrs	r3, 6
     cfe:	06 c0       	rjmp	.+12     	; 0xd0c <vfprintf+0xc4>
     d00:	8a e0       	ldi	r24, 0x0A	; 10
     d02:	98 9e       	mul	r9, r24
     d04:	20 0d       	add	r18, r0
     d06:	11 24       	eor	r1, r1
     d08:	92 2e       	mov	r9, r18
     d0a:	11 c0       	rjmp	.+34     	; 0xd2e <vfprintf+0xe6>
     d0c:	ea e0       	ldi	r30, 0x0A	; 10
     d0e:	2e 9e       	mul	r2, r30
     d10:	20 0d       	add	r18, r0
     d12:	11 24       	eor	r1, r1
     d14:	22 2e       	mov	r2, r18
     d16:	f3 2d       	mov	r31, r3
     d18:	f0 62       	ori	r31, 0x20	; 32
     d1a:	3f 2e       	mov	r3, r31
     d1c:	08 c0       	rjmp	.+16     	; 0xd2e <vfprintf+0xe6>
     d1e:	8c 36       	cpi	r24, 0x6C	; 108
     d20:	21 f4       	brne	.+8      	; 0xd2a <vfprintf+0xe2>
     d22:	83 2d       	mov	r24, r3
     d24:	80 68       	ori	r24, 0x80	; 128
     d26:	38 2e       	mov	r3, r24
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <vfprintf+0xe6>
     d2a:	88 36       	cpi	r24, 0x68	; 104
     d2c:	41 f4       	brne	.+16     	; 0xd3e <vfprintf+0xf6>
     d2e:	f7 01       	movw	r30, r14
     d30:	93 fd       	sbrc	r25, 3
     d32:	85 91       	lpm	r24, Z+
     d34:	93 ff       	sbrs	r25, 3
     d36:	81 91       	ld	r24, Z+
     d38:	7f 01       	movw	r14, r30
     d3a:	81 11       	cpse	r24, r1
     d3c:	b3 cf       	rjmp	.-154    	; 0xca4 <vfprintf+0x5c>
     d3e:	98 2f       	mov	r25, r24
     d40:	9f 7d       	andi	r25, 0xDF	; 223
     d42:	95 54       	subi	r25, 0x45	; 69
     d44:	93 30       	cpi	r25, 0x03	; 3
     d46:	28 f4       	brcc	.+10     	; 0xd52 <vfprintf+0x10a>
     d48:	0c 5f       	subi	r16, 0xFC	; 252
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	9f e3       	ldi	r25, 0x3F	; 63
     d4e:	99 83       	std	Y+1, r25	; 0x01
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <vfprintf+0x124>
     d52:	83 36       	cpi	r24, 0x63	; 99
     d54:	31 f0       	breq	.+12     	; 0xd62 <vfprintf+0x11a>
     d56:	83 37       	cpi	r24, 0x73	; 115
     d58:	71 f0       	breq	.+28     	; 0xd76 <vfprintf+0x12e>
     d5a:	83 35       	cpi	r24, 0x53	; 83
     d5c:	09 f0       	breq	.+2      	; 0xd60 <vfprintf+0x118>
     d5e:	59 c0       	rjmp	.+178    	; 0xe12 <vfprintf+0x1ca>
     d60:	21 c0       	rjmp	.+66     	; 0xda4 <vfprintf+0x15c>
     d62:	f8 01       	movw	r30, r16
     d64:	80 81       	ld	r24, Z
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	0e 5f       	subi	r16, 0xFE	; 254
     d6a:	1f 4f       	sbci	r17, 0xFF	; 255
     d6c:	88 24       	eor	r8, r8
     d6e:	83 94       	inc	r8
     d70:	91 2c       	mov	r9, r1
     d72:	53 01       	movw	r10, r6
     d74:	13 c0       	rjmp	.+38     	; 0xd9c <vfprintf+0x154>
     d76:	28 01       	movw	r4, r16
     d78:	f2 e0       	ldi	r31, 0x02	; 2
     d7a:	4f 0e       	add	r4, r31
     d7c:	51 1c       	adc	r5, r1
     d7e:	f8 01       	movw	r30, r16
     d80:	a0 80       	ld	r10, Z
     d82:	b1 80       	ldd	r11, Z+1	; 0x01
     d84:	36 fe       	sbrs	r3, 6
     d86:	03 c0       	rjmp	.+6      	; 0xd8e <vfprintf+0x146>
     d88:	69 2d       	mov	r22, r9
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <vfprintf+0x14a>
     d8e:	6f ef       	ldi	r22, 0xFF	; 255
     d90:	7f ef       	ldi	r23, 0xFF	; 255
     d92:	c5 01       	movw	r24, r10
     d94:	0e 94 10 08 	call	0x1020	; 0x1020 <strnlen>
     d98:	4c 01       	movw	r8, r24
     d9a:	82 01       	movw	r16, r4
     d9c:	f3 2d       	mov	r31, r3
     d9e:	ff 77       	andi	r31, 0x7F	; 127
     da0:	3f 2e       	mov	r3, r31
     da2:	16 c0       	rjmp	.+44     	; 0xdd0 <vfprintf+0x188>
     da4:	28 01       	movw	r4, r16
     da6:	22 e0       	ldi	r18, 0x02	; 2
     da8:	42 0e       	add	r4, r18
     daa:	51 1c       	adc	r5, r1
     dac:	f8 01       	movw	r30, r16
     dae:	a0 80       	ld	r10, Z
     db0:	b1 80       	ldd	r11, Z+1	; 0x01
     db2:	36 fe       	sbrs	r3, 6
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <vfprintf+0x174>
     db6:	69 2d       	mov	r22, r9
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <vfprintf+0x178>
     dbc:	6f ef       	ldi	r22, 0xFF	; 255
     dbe:	7f ef       	ldi	r23, 0xFF	; 255
     dc0:	c5 01       	movw	r24, r10
     dc2:	0e 94 05 08 	call	0x100a	; 0x100a <strnlen_P>
     dc6:	4c 01       	movw	r8, r24
     dc8:	f3 2d       	mov	r31, r3
     dca:	f0 68       	ori	r31, 0x80	; 128
     dcc:	3f 2e       	mov	r3, r31
     dce:	82 01       	movw	r16, r4
     dd0:	33 fc       	sbrc	r3, 3
     dd2:	1b c0       	rjmp	.+54     	; 0xe0a <vfprintf+0x1c2>
     dd4:	82 2d       	mov	r24, r2
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	88 16       	cp	r8, r24
     dda:	99 06       	cpc	r9, r25
     ddc:	b0 f4       	brcc	.+44     	; 0xe0a <vfprintf+0x1c2>
     dde:	b6 01       	movw	r22, r12
     de0:	80 e2       	ldi	r24, 0x20	; 32
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     de8:	2a 94       	dec	r2
     dea:	f4 cf       	rjmp	.-24     	; 0xdd4 <vfprintf+0x18c>
     dec:	f5 01       	movw	r30, r10
     dee:	37 fc       	sbrc	r3, 7
     df0:	85 91       	lpm	r24, Z+
     df2:	37 fe       	sbrs	r3, 7
     df4:	81 91       	ld	r24, Z+
     df6:	5f 01       	movw	r10, r30
     df8:	b6 01       	movw	r22, r12
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     e00:	21 10       	cpse	r2, r1
     e02:	2a 94       	dec	r2
     e04:	21 e0       	ldi	r18, 0x01	; 1
     e06:	82 1a       	sub	r8, r18
     e08:	91 08       	sbc	r9, r1
     e0a:	81 14       	cp	r8, r1
     e0c:	91 04       	cpc	r9, r1
     e0e:	71 f7       	brne	.-36     	; 0xdec <vfprintf+0x1a4>
     e10:	e8 c0       	rjmp	.+464    	; 0xfe2 <vfprintf+0x39a>
     e12:	84 36       	cpi	r24, 0x64	; 100
     e14:	11 f0       	breq	.+4      	; 0xe1a <vfprintf+0x1d2>
     e16:	89 36       	cpi	r24, 0x69	; 105
     e18:	41 f5       	brne	.+80     	; 0xe6a <vfprintf+0x222>
     e1a:	f8 01       	movw	r30, r16
     e1c:	37 fe       	sbrs	r3, 7
     e1e:	07 c0       	rjmp	.+14     	; 0xe2e <vfprintf+0x1e6>
     e20:	60 81       	ld	r22, Z
     e22:	71 81       	ldd	r23, Z+1	; 0x01
     e24:	82 81       	ldd	r24, Z+2	; 0x02
     e26:	93 81       	ldd	r25, Z+3	; 0x03
     e28:	0c 5f       	subi	r16, 0xFC	; 252
     e2a:	1f 4f       	sbci	r17, 0xFF	; 255
     e2c:	08 c0       	rjmp	.+16     	; 0xe3e <vfprintf+0x1f6>
     e2e:	60 81       	ld	r22, Z
     e30:	71 81       	ldd	r23, Z+1	; 0x01
     e32:	07 2e       	mov	r0, r23
     e34:	00 0c       	add	r0, r0
     e36:	88 0b       	sbc	r24, r24
     e38:	99 0b       	sbc	r25, r25
     e3a:	0e 5f       	subi	r16, 0xFE	; 254
     e3c:	1f 4f       	sbci	r17, 0xFF	; 255
     e3e:	f3 2d       	mov	r31, r3
     e40:	ff 76       	andi	r31, 0x6F	; 111
     e42:	3f 2e       	mov	r3, r31
     e44:	97 ff       	sbrs	r25, 7
     e46:	09 c0       	rjmp	.+18     	; 0xe5a <vfprintf+0x212>
     e48:	90 95       	com	r25
     e4a:	80 95       	com	r24
     e4c:	70 95       	com	r23
     e4e:	61 95       	neg	r22
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	8f 4f       	sbci	r24, 0xFF	; 255
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	f0 68       	ori	r31, 0x80	; 128
     e58:	3f 2e       	mov	r3, r31
     e5a:	2a e0       	ldi	r18, 0x0A	; 10
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	a3 01       	movw	r20, r6
     e60:	0e 94 57 08 	call	0x10ae	; 0x10ae <__ultoa_invert>
     e64:	88 2e       	mov	r8, r24
     e66:	86 18       	sub	r8, r6
     e68:	45 c0       	rjmp	.+138    	; 0xef4 <vfprintf+0x2ac>
     e6a:	85 37       	cpi	r24, 0x75	; 117
     e6c:	31 f4       	brne	.+12     	; 0xe7a <vfprintf+0x232>
     e6e:	23 2d       	mov	r18, r3
     e70:	2f 7e       	andi	r18, 0xEF	; 239
     e72:	b2 2e       	mov	r11, r18
     e74:	2a e0       	ldi	r18, 0x0A	; 10
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	25 c0       	rjmp	.+74     	; 0xec4 <vfprintf+0x27c>
     e7a:	93 2d       	mov	r25, r3
     e7c:	99 7f       	andi	r25, 0xF9	; 249
     e7e:	b9 2e       	mov	r11, r25
     e80:	8f 36       	cpi	r24, 0x6F	; 111
     e82:	c1 f0       	breq	.+48     	; 0xeb4 <vfprintf+0x26c>
     e84:	18 f4       	brcc	.+6      	; 0xe8c <vfprintf+0x244>
     e86:	88 35       	cpi	r24, 0x58	; 88
     e88:	79 f0       	breq	.+30     	; 0xea8 <vfprintf+0x260>
     e8a:	b5 c0       	rjmp	.+362    	; 0xff6 <vfprintf+0x3ae>
     e8c:	80 37       	cpi	r24, 0x70	; 112
     e8e:	19 f0       	breq	.+6      	; 0xe96 <vfprintf+0x24e>
     e90:	88 37       	cpi	r24, 0x78	; 120
     e92:	21 f0       	breq	.+8      	; 0xe9c <vfprintf+0x254>
     e94:	b0 c0       	rjmp	.+352    	; 0xff6 <vfprintf+0x3ae>
     e96:	e9 2f       	mov	r30, r25
     e98:	e0 61       	ori	r30, 0x10	; 16
     e9a:	be 2e       	mov	r11, r30
     e9c:	b4 fe       	sbrs	r11, 4
     e9e:	0d c0       	rjmp	.+26     	; 0xeba <vfprintf+0x272>
     ea0:	fb 2d       	mov	r31, r11
     ea2:	f4 60       	ori	r31, 0x04	; 4
     ea4:	bf 2e       	mov	r11, r31
     ea6:	09 c0       	rjmp	.+18     	; 0xeba <vfprintf+0x272>
     ea8:	34 fe       	sbrs	r3, 4
     eaa:	0a c0       	rjmp	.+20     	; 0xec0 <vfprintf+0x278>
     eac:	29 2f       	mov	r18, r25
     eae:	26 60       	ori	r18, 0x06	; 6
     eb0:	b2 2e       	mov	r11, r18
     eb2:	06 c0       	rjmp	.+12     	; 0xec0 <vfprintf+0x278>
     eb4:	28 e0       	ldi	r18, 0x08	; 8
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	05 c0       	rjmp	.+10     	; 0xec4 <vfprintf+0x27c>
     eba:	20 e1       	ldi	r18, 0x10	; 16
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <vfprintf+0x27c>
     ec0:	20 e1       	ldi	r18, 0x10	; 16
     ec2:	32 e0       	ldi	r19, 0x02	; 2
     ec4:	f8 01       	movw	r30, r16
     ec6:	b7 fe       	sbrs	r11, 7
     ec8:	07 c0       	rjmp	.+14     	; 0xed8 <vfprintf+0x290>
     eca:	60 81       	ld	r22, Z
     ecc:	71 81       	ldd	r23, Z+1	; 0x01
     ece:	82 81       	ldd	r24, Z+2	; 0x02
     ed0:	93 81       	ldd	r25, Z+3	; 0x03
     ed2:	0c 5f       	subi	r16, 0xFC	; 252
     ed4:	1f 4f       	sbci	r17, 0xFF	; 255
     ed6:	06 c0       	rjmp	.+12     	; 0xee4 <vfprintf+0x29c>
     ed8:	60 81       	ld	r22, Z
     eda:	71 81       	ldd	r23, Z+1	; 0x01
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 5f       	subi	r16, 0xFE	; 254
     ee2:	1f 4f       	sbci	r17, 0xFF	; 255
     ee4:	a3 01       	movw	r20, r6
     ee6:	0e 94 57 08 	call	0x10ae	; 0x10ae <__ultoa_invert>
     eea:	88 2e       	mov	r8, r24
     eec:	86 18       	sub	r8, r6
     eee:	fb 2d       	mov	r31, r11
     ef0:	ff 77       	andi	r31, 0x7F	; 127
     ef2:	3f 2e       	mov	r3, r31
     ef4:	36 fe       	sbrs	r3, 6
     ef6:	0d c0       	rjmp	.+26     	; 0xf12 <vfprintf+0x2ca>
     ef8:	23 2d       	mov	r18, r3
     efa:	2e 7f       	andi	r18, 0xFE	; 254
     efc:	a2 2e       	mov	r10, r18
     efe:	89 14       	cp	r8, r9
     f00:	58 f4       	brcc	.+22     	; 0xf18 <vfprintf+0x2d0>
     f02:	34 fe       	sbrs	r3, 4
     f04:	0b c0       	rjmp	.+22     	; 0xf1c <vfprintf+0x2d4>
     f06:	32 fc       	sbrc	r3, 2
     f08:	09 c0       	rjmp	.+18     	; 0xf1c <vfprintf+0x2d4>
     f0a:	83 2d       	mov	r24, r3
     f0c:	8e 7e       	andi	r24, 0xEE	; 238
     f0e:	a8 2e       	mov	r10, r24
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <vfprintf+0x2d4>
     f12:	b8 2c       	mov	r11, r8
     f14:	a3 2c       	mov	r10, r3
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <vfprintf+0x2d6>
     f18:	b8 2c       	mov	r11, r8
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <vfprintf+0x2d6>
     f1c:	b9 2c       	mov	r11, r9
     f1e:	a4 fe       	sbrs	r10, 4
     f20:	0f c0       	rjmp	.+30     	; 0xf40 <vfprintf+0x2f8>
     f22:	fe 01       	movw	r30, r28
     f24:	e8 0d       	add	r30, r8
     f26:	f1 1d       	adc	r31, r1
     f28:	80 81       	ld	r24, Z
     f2a:	80 33       	cpi	r24, 0x30	; 48
     f2c:	21 f4       	brne	.+8      	; 0xf36 <vfprintf+0x2ee>
     f2e:	9a 2d       	mov	r25, r10
     f30:	99 7e       	andi	r25, 0xE9	; 233
     f32:	a9 2e       	mov	r10, r25
     f34:	09 c0       	rjmp	.+18     	; 0xf48 <vfprintf+0x300>
     f36:	a2 fe       	sbrs	r10, 2
     f38:	06 c0       	rjmp	.+12     	; 0xf46 <vfprintf+0x2fe>
     f3a:	b3 94       	inc	r11
     f3c:	b3 94       	inc	r11
     f3e:	04 c0       	rjmp	.+8      	; 0xf48 <vfprintf+0x300>
     f40:	8a 2d       	mov	r24, r10
     f42:	86 78       	andi	r24, 0x86	; 134
     f44:	09 f0       	breq	.+2      	; 0xf48 <vfprintf+0x300>
     f46:	b3 94       	inc	r11
     f48:	a3 fc       	sbrc	r10, 3
     f4a:	11 c0       	rjmp	.+34     	; 0xf6e <vfprintf+0x326>
     f4c:	a0 fe       	sbrs	r10, 0
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <vfprintf+0x314>
     f50:	b2 14       	cp	r11, r2
     f52:	88 f4       	brcc	.+34     	; 0xf76 <vfprintf+0x32e>
     f54:	28 0c       	add	r2, r8
     f56:	92 2c       	mov	r9, r2
     f58:	9b 18       	sub	r9, r11
     f5a:	0e c0       	rjmp	.+28     	; 0xf78 <vfprintf+0x330>
     f5c:	b2 14       	cp	r11, r2
     f5e:	60 f4       	brcc	.+24     	; 0xf78 <vfprintf+0x330>
     f60:	b6 01       	movw	r22, r12
     f62:	80 e2       	ldi	r24, 0x20	; 32
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     f6a:	b3 94       	inc	r11
     f6c:	f7 cf       	rjmp	.-18     	; 0xf5c <vfprintf+0x314>
     f6e:	b2 14       	cp	r11, r2
     f70:	18 f4       	brcc	.+6      	; 0xf78 <vfprintf+0x330>
     f72:	2b 18       	sub	r2, r11
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <vfprintf+0x332>
     f76:	98 2c       	mov	r9, r8
     f78:	21 2c       	mov	r2, r1
     f7a:	a4 fe       	sbrs	r10, 4
     f7c:	10 c0       	rjmp	.+32     	; 0xf9e <vfprintf+0x356>
     f7e:	b6 01       	movw	r22, r12
     f80:	80 e3       	ldi	r24, 0x30	; 48
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     f88:	a2 fe       	sbrs	r10, 2
     f8a:	17 c0       	rjmp	.+46     	; 0xfba <vfprintf+0x372>
     f8c:	a1 fc       	sbrc	r10, 1
     f8e:	03 c0       	rjmp	.+6      	; 0xf96 <vfprintf+0x34e>
     f90:	88 e7       	ldi	r24, 0x78	; 120
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <vfprintf+0x352>
     f96:	88 e5       	ldi	r24, 0x58	; 88
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	b6 01       	movw	r22, r12
     f9c:	0c c0       	rjmp	.+24     	; 0xfb6 <vfprintf+0x36e>
     f9e:	8a 2d       	mov	r24, r10
     fa0:	86 78       	andi	r24, 0x86	; 134
     fa2:	59 f0       	breq	.+22     	; 0xfba <vfprintf+0x372>
     fa4:	a1 fe       	sbrs	r10, 1
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <vfprintf+0x364>
     fa8:	8b e2       	ldi	r24, 0x2B	; 43
     faa:	01 c0       	rjmp	.+2      	; 0xfae <vfprintf+0x366>
     fac:	80 e2       	ldi	r24, 0x20	; 32
     fae:	a7 fc       	sbrc	r10, 7
     fb0:	8d e2       	ldi	r24, 0x2D	; 45
     fb2:	b6 01       	movw	r22, r12
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     fba:	89 14       	cp	r8, r9
     fbc:	38 f4       	brcc	.+14     	; 0xfcc <vfprintf+0x384>
     fbe:	b6 01       	movw	r22, r12
     fc0:	80 e3       	ldi	r24, 0x30	; 48
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     fc8:	9a 94       	dec	r9
     fca:	f7 cf       	rjmp	.-18     	; 0xfba <vfprintf+0x372>
     fcc:	8a 94       	dec	r8
     fce:	f3 01       	movw	r30, r6
     fd0:	e8 0d       	add	r30, r8
     fd2:	f1 1d       	adc	r31, r1
     fd4:	80 81       	ld	r24, Z
     fd6:	b6 01       	movw	r22, r12
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     fde:	81 10       	cpse	r8, r1
     fe0:	f5 cf       	rjmp	.-22     	; 0xfcc <vfprintf+0x384>
     fe2:	22 20       	and	r2, r2
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <vfprintf+0x3a0>
     fe6:	42 ce       	rjmp	.-892    	; 0xc6c <vfprintf+0x24>
     fe8:	b6 01       	movw	r22, r12
     fea:	80 e2       	ldi	r24, 0x20	; 32
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 1b 08 	call	0x1036	; 0x1036 <fputc>
     ff2:	2a 94       	dec	r2
     ff4:	f6 cf       	rjmp	.-20     	; 0xfe2 <vfprintf+0x39a>
     ff6:	f6 01       	movw	r30, r12
     ff8:	86 81       	ldd	r24, Z+6	; 0x06
     ffa:	97 81       	ldd	r25, Z+7	; 0x07
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <vfprintf+0x3ba>
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	9f ef       	ldi	r25, 0xFF	; 255
    1002:	2b 96       	adiw	r28, 0x0b	; 11
    1004:	e2 e1       	ldi	r30, 0x12	; 18
    1006:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__epilogue_restores__>

0000100a <strnlen_P>:
    100a:	fc 01       	movw	r30, r24
    100c:	05 90       	lpm	r0, Z+
    100e:	61 50       	subi	r22, 0x01	; 1
    1010:	70 40       	sbci	r23, 0x00	; 0
    1012:	01 10       	cpse	r0, r1
    1014:	d8 f7       	brcc	.-10     	; 0x100c <strnlen_P+0x2>
    1016:	80 95       	com	r24
    1018:	90 95       	com	r25
    101a:	8e 0f       	add	r24, r30
    101c:	9f 1f       	adc	r25, r31
    101e:	08 95       	ret

00001020 <strnlen>:
    1020:	fc 01       	movw	r30, r24
    1022:	61 50       	subi	r22, 0x01	; 1
    1024:	70 40       	sbci	r23, 0x00	; 0
    1026:	01 90       	ld	r0, Z+
    1028:	01 10       	cpse	r0, r1
    102a:	d8 f7       	brcc	.-10     	; 0x1022 <strnlen+0x2>
    102c:	80 95       	com	r24
    102e:	90 95       	com	r25
    1030:	8e 0f       	add	r24, r30
    1032:	9f 1f       	adc	r25, r31
    1034:	08 95       	ret

00001036 <fputc>:
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	fb 01       	movw	r30, r22
    1040:	23 81       	ldd	r18, Z+3	; 0x03
    1042:	21 fd       	sbrc	r18, 1
    1044:	03 c0       	rjmp	.+6      	; 0x104c <fputc+0x16>
    1046:	8f ef       	ldi	r24, 0xFF	; 255
    1048:	9f ef       	ldi	r25, 0xFF	; 255
    104a:	2c c0       	rjmp	.+88     	; 0x10a4 <fputc+0x6e>
    104c:	22 ff       	sbrs	r18, 2
    104e:	16 c0       	rjmp	.+44     	; 0x107c <fputc+0x46>
    1050:	46 81       	ldd	r20, Z+6	; 0x06
    1052:	57 81       	ldd	r21, Z+7	; 0x07
    1054:	24 81       	ldd	r18, Z+4	; 0x04
    1056:	35 81       	ldd	r19, Z+5	; 0x05
    1058:	42 17       	cp	r20, r18
    105a:	53 07       	cpc	r21, r19
    105c:	44 f4       	brge	.+16     	; 0x106e <fputc+0x38>
    105e:	a0 81       	ld	r26, Z
    1060:	b1 81       	ldd	r27, Z+1	; 0x01
    1062:	9d 01       	movw	r18, r26
    1064:	2f 5f       	subi	r18, 0xFF	; 255
    1066:	3f 4f       	sbci	r19, 0xFF	; 255
    1068:	31 83       	std	Z+1, r19	; 0x01
    106a:	20 83       	st	Z, r18
    106c:	8c 93       	st	X, r24
    106e:	26 81       	ldd	r18, Z+6	; 0x06
    1070:	37 81       	ldd	r19, Z+7	; 0x07
    1072:	2f 5f       	subi	r18, 0xFF	; 255
    1074:	3f 4f       	sbci	r19, 0xFF	; 255
    1076:	37 83       	std	Z+7, r19	; 0x07
    1078:	26 83       	std	Z+6, r18	; 0x06
    107a:	14 c0       	rjmp	.+40     	; 0x10a4 <fputc+0x6e>
    107c:	8b 01       	movw	r16, r22
    107e:	ec 01       	movw	r28, r24
    1080:	fb 01       	movw	r30, r22
    1082:	00 84       	ldd	r0, Z+8	; 0x08
    1084:	f1 85       	ldd	r31, Z+9	; 0x09
    1086:	e0 2d       	mov	r30, r0
    1088:	09 95       	icall
    108a:	89 2b       	or	r24, r25
    108c:	e1 f6       	brne	.-72     	; 0x1046 <fputc+0x10>
    108e:	d8 01       	movw	r26, r16
    1090:	16 96       	adiw	r26, 0x06	; 6
    1092:	8d 91       	ld	r24, X+
    1094:	9c 91       	ld	r25, X
    1096:	17 97       	sbiw	r26, 0x07	; 7
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	17 96       	adiw	r26, 0x07	; 7
    109c:	9c 93       	st	X, r25
    109e:	8e 93       	st	-X, r24
    10a0:	16 97       	sbiw	r26, 0x06	; 6
    10a2:	ce 01       	movw	r24, r28
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	08 95       	ret

000010ae <__ultoa_invert>:
    10ae:	fa 01       	movw	r30, r20
    10b0:	aa 27       	eor	r26, r26
    10b2:	28 30       	cpi	r18, 0x08	; 8
    10b4:	51 f1       	breq	.+84     	; 0x110a <__ultoa_invert+0x5c>
    10b6:	20 31       	cpi	r18, 0x10	; 16
    10b8:	81 f1       	breq	.+96     	; 0x111a <__ultoa_invert+0x6c>
    10ba:	e8 94       	clt
    10bc:	6f 93       	push	r22
    10be:	6e 7f       	andi	r22, 0xFE	; 254
    10c0:	6e 5f       	subi	r22, 0xFE	; 254
    10c2:	7f 4f       	sbci	r23, 0xFF	; 255
    10c4:	8f 4f       	sbci	r24, 0xFF	; 255
    10c6:	9f 4f       	sbci	r25, 0xFF	; 255
    10c8:	af 4f       	sbci	r26, 0xFF	; 255
    10ca:	b1 e0       	ldi	r27, 0x01	; 1
    10cc:	3e d0       	rcall	.+124    	; 0x114a <__ultoa_invert+0x9c>
    10ce:	b4 e0       	ldi	r27, 0x04	; 4
    10d0:	3c d0       	rcall	.+120    	; 0x114a <__ultoa_invert+0x9c>
    10d2:	67 0f       	add	r22, r23
    10d4:	78 1f       	adc	r23, r24
    10d6:	89 1f       	adc	r24, r25
    10d8:	9a 1f       	adc	r25, r26
    10da:	a1 1d       	adc	r26, r1
    10dc:	68 0f       	add	r22, r24
    10de:	79 1f       	adc	r23, r25
    10e0:	8a 1f       	adc	r24, r26
    10e2:	91 1d       	adc	r25, r1
    10e4:	a1 1d       	adc	r26, r1
    10e6:	6a 0f       	add	r22, r26
    10e8:	71 1d       	adc	r23, r1
    10ea:	81 1d       	adc	r24, r1
    10ec:	91 1d       	adc	r25, r1
    10ee:	a1 1d       	adc	r26, r1
    10f0:	20 d0       	rcall	.+64     	; 0x1132 <__ultoa_invert+0x84>
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <__ultoa_invert+0x48>
    10f4:	68 94       	set
    10f6:	3f 91       	pop	r19
    10f8:	2a e0       	ldi	r18, 0x0A	; 10
    10fa:	26 9f       	mul	r18, r22
    10fc:	11 24       	eor	r1, r1
    10fe:	30 19       	sub	r19, r0
    1100:	30 5d       	subi	r19, 0xD0	; 208
    1102:	31 93       	st	Z+, r19
    1104:	de f6       	brtc	.-74     	; 0x10bc <__ultoa_invert+0xe>
    1106:	cf 01       	movw	r24, r30
    1108:	08 95       	ret
    110a:	46 2f       	mov	r20, r22
    110c:	47 70       	andi	r20, 0x07	; 7
    110e:	40 5d       	subi	r20, 0xD0	; 208
    1110:	41 93       	st	Z+, r20
    1112:	b3 e0       	ldi	r27, 0x03	; 3
    1114:	0f d0       	rcall	.+30     	; 0x1134 <__ultoa_invert+0x86>
    1116:	c9 f7       	brne	.-14     	; 0x110a <__ultoa_invert+0x5c>
    1118:	f6 cf       	rjmp	.-20     	; 0x1106 <__ultoa_invert+0x58>
    111a:	46 2f       	mov	r20, r22
    111c:	4f 70       	andi	r20, 0x0F	; 15
    111e:	40 5d       	subi	r20, 0xD0	; 208
    1120:	4a 33       	cpi	r20, 0x3A	; 58
    1122:	18 f0       	brcs	.+6      	; 0x112a <__ultoa_invert+0x7c>
    1124:	49 5d       	subi	r20, 0xD9	; 217
    1126:	31 fd       	sbrc	r19, 1
    1128:	40 52       	subi	r20, 0x20	; 32
    112a:	41 93       	st	Z+, r20
    112c:	02 d0       	rcall	.+4      	; 0x1132 <__ultoa_invert+0x84>
    112e:	a9 f7       	brne	.-22     	; 0x111a <__ultoa_invert+0x6c>
    1130:	ea cf       	rjmp	.-44     	; 0x1106 <__ultoa_invert+0x58>
    1132:	b4 e0       	ldi	r27, 0x04	; 4
    1134:	a6 95       	lsr	r26
    1136:	97 95       	ror	r25
    1138:	87 95       	ror	r24
    113a:	77 95       	ror	r23
    113c:	67 95       	ror	r22
    113e:	ba 95       	dec	r27
    1140:	c9 f7       	brne	.-14     	; 0x1134 <__ultoa_invert+0x86>
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	61 05       	cpc	r22, r1
    1146:	71 05       	cpc	r23, r1
    1148:	08 95       	ret
    114a:	9b 01       	movw	r18, r22
    114c:	ac 01       	movw	r20, r24
    114e:	0a 2e       	mov	r0, r26
    1150:	06 94       	lsr	r0
    1152:	57 95       	ror	r21
    1154:	47 95       	ror	r20
    1156:	37 95       	ror	r19
    1158:	27 95       	ror	r18
    115a:	ba 95       	dec	r27
    115c:	c9 f7       	brne	.-14     	; 0x1150 <__ultoa_invert+0xa2>
    115e:	62 0f       	add	r22, r18
    1160:	73 1f       	adc	r23, r19
    1162:	84 1f       	adc	r24, r20
    1164:	95 1f       	adc	r25, r21
    1166:	a0 1d       	adc	r26, r0
    1168:	08 95       	ret

0000116a <__prologue_saves__>:
    116a:	2f 92       	push	r2
    116c:	3f 92       	push	r3
    116e:	4f 92       	push	r4
    1170:	5f 92       	push	r5
    1172:	6f 92       	push	r6
    1174:	7f 92       	push	r7
    1176:	8f 92       	push	r8
    1178:	9f 92       	push	r9
    117a:	af 92       	push	r10
    117c:	bf 92       	push	r11
    117e:	cf 92       	push	r12
    1180:	df 92       	push	r13
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	ca 1b       	sub	r28, r26
    1194:	db 0b       	sbc	r29, r27
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	09 94       	ijmp

000011a2 <__epilogue_restores__>:
    11a2:	2a 88       	ldd	r2, Y+18	; 0x12
    11a4:	39 88       	ldd	r3, Y+17	; 0x11
    11a6:	48 88       	ldd	r4, Y+16	; 0x10
    11a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    11aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    11ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    11ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    11b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    11b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    11b4:	b9 84       	ldd	r11, Y+9	; 0x09
    11b6:	c8 84       	ldd	r12, Y+8	; 0x08
    11b8:	df 80       	ldd	r13, Y+7	; 0x07
    11ba:	ee 80       	ldd	r14, Y+6	; 0x06
    11bc:	fd 80       	ldd	r15, Y+5	; 0x05
    11be:	0c 81       	ldd	r16, Y+4	; 0x04
    11c0:	1b 81       	ldd	r17, Y+3	; 0x03
    11c2:	aa 81       	ldd	r26, Y+2	; 0x02
    11c4:	b9 81       	ldd	r27, Y+1	; 0x01
    11c6:	ce 0f       	add	r28, r30
    11c8:	d1 1d       	adc	r29, r1
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	ed 01       	movw	r28, r26
    11d6:	08 95       	ret

000011d8 <_exit>:
    11d8:	f8 94       	cli

000011da <__stop_program>:
    11da:	ff cf       	rjmp	.-2      	; 0x11da <__stop_program>
